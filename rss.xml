<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Patrick Jos√© Pereira</title>
        <link>https://patrickelectric.work</link>
        <description>I am an Electronics Engineer that works with robotic systems, OSS and OSH.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://patrickelectric.work/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 31 Aug 2020 13:55:39 +0000</lastBuildDate>
        <item>
            <title>How to rock: Doing the right thing</title>
            <pubDate>Mon, 31 Aug 2020 13:55:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/how-to-rock-contribution-tips/</link>
            <guid>https://patrickelectric.work/blog/2020/how-to-rock-contribution-tips/</guid>
            <description>&lt;p&gt;After a couple of years collaborating with open source&#x2F;free software projects, I started to help newcomers to contribute and push the development practices further. This post will try to itemize the most important items that can used for software collaboration.
Before starting, be sure to follow my &lt;a href=&quot;&#x2F;tags&#x2F;how-to-rock&quot;&gt;previous posts&lt;&#x2F;a&gt;, this post complements what already exists.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Now, I&#x27;m going to throw some good practices of code development and contribution, and during this post I&#x27;ll explain why such practices can be archived without much effort:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid creating multiple PRs for the same work&lt;&#x2F;strong&gt;, update the ones that are still open.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You created a Pull Request called &amp;quot;Feature: add button&amp;quot;, some modifications will be necessary after the review process, and for that you&#x27;ll need to update the same branch over creating new ones. That&#x27;s necessary to help the project maintainers to see previous comments and your development history, avoid repository noise and unnecessary PRs in the project history. Creating multiple PRs will only make the maintainers confuse and unable to track old comments, suggestions and your code changes between PRs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-contained commits&lt;&#x2F;strong&gt;, avoid doing multiple things in the same commit.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You have created a commit to fix the serial communication class, and inside the same commit you are doing 3 different things, removing trailing spaces, fixing a pointer validation check and a typo in the documentation of a totally different class. This can appear to be silly and bureaucratic, but there are good reasons to break this simple commit and at least 3 different commits, one for the pointer check, a second one for the typo and a third one for the trailing space.
&lt;ul&gt;
&lt;li&gt;It makes your work more clear when the maintainer does the review per commit&lt;&#x2F;li&gt;
&lt;li&gt;Makes it easier for developers to cherry-pick your work avoiding conflicts&lt;&#x2F;li&gt;
&lt;li&gt;Makes it easier to fix conflicts when doing rebases over the master branch&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Helps developers to read the project history&lt;&#x2F;li&gt;
&lt;li&gt;Developers usually track lines history to understand the changes behind a functionality, it&#x27;s common to search with &lt;code&gt;git grep&lt;&#x2F;code&gt; history from commits or lines changes in specific commits to understand the code, function, class or a small feature.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-sustained PRs&lt;&#x2F;strong&gt;, avoid doing multiple things in the same PR, like different features. They may appear simple with small pieces of code&#x2F;functionality but they can escalate quickly after a review process, and if both features are somehow related or dependently, it&#x27;s recommended to break it in multiple PRs with code to maintain compatibility with current code base. A huge PR can drag developer and maintainer in a rabbit hole, making the PR to be not merged, keeping it simple is the best way to merge it and get the sweet serotonin boost.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You have applied a PR for software notifications, and somehow you also added a URL fetch functionality to grab new software versions, etc. After the first review, the maintainer asks to create a more abstracted way to fetch api and to deal with network requirements, this will start to convolute the PR, moving the initial idea of the notification feature to an entire network REST API architecture. With that, it&#x27;s better to break the PR in two, one that only provides the notification software and interface feature and a second PR that is used for the REST API.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your own review&lt;&#x2F;strong&gt;, the final and probably most important tip of all. Doing you own review will train your mind and eyes to detect poor code standards or bad practices, it&#x27;ll also make your PR be merged easily and faster, since you&#x27;ll be able to catch problems before the reviewer feedback. Some reviewers may think that reviewing your own PR is a must, since we are talking about open source projects and free software, you should understand that the people that are reviewing your code are not obligated to do so, the majority are collaborating and donating their own time to help the development and maintenance of such projects, doing your own review is also sign of empathy about the project and maintainer time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>How to rock: Flowing with git</title>
            <pubDate>Mon, 24 Aug 2020 13:55:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/how-to-rock-flowing-with-git/</link>
            <guid>https://patrickelectric.work/blog/2020/how-to-rock-flowing-with-git/</guid>
            <description>&lt;p&gt;Git is awesome, git rocks, git is like a super advanced car, but if you don&#x27;t read the manual, you&#x27;ll never know the features!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;useful-tips&quot;&gt;Useful tips&lt;&#x2F;h1&gt;
&lt;p&gt;The idea behind this section is to point some important things that I learned in the pass years while reading some great books, such as: &lt;a href=&quot;https:&#x2F;&#x2F;isbnsearch.org&#x2F;isbn&#x2F;9781783553754&quot;&gt;Mastering Git&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&quot;&gt;Pro Git(it&#x27;s free!)&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tig&quot;&gt;Tig&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What&#x27;s the use of having access to everything, if you can&#x27;t visualize it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Git is really great, but what matters a great tool if the user interface is not as polished as we desire to be. &lt;strong&gt;&lt;code&gt;Tig&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; is one of the greatest tools to be used with Git, is the UI that mostly programmers are missing to visualize and understand what is going on in the git repository. If you didn&#x27;t know about it, install and use it now.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;tig-all.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    tig --all
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;Tig&lt;&#x2F;code&gt; also allow a bunch of useful arguments, such as &lt;code&gt;log&lt;&#x2F;code&gt;, &lt;code&gt;show&lt;&#x2F;code&gt;, &lt;code&gt;status&lt;&#x2F;code&gt;, &lt;code&gt;reflog&lt;&#x2F;code&gt;, &lt;code&gt;blame&lt;&#x2F;code&gt;, &lt;code&gt;grep&lt;&#x2F;code&gt;, &lt;code&gt;refs&lt;&#x2F;code&gt;, &lt;code&gt;stash&lt;&#x2F;code&gt; and others, we are going to talk about some of these later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-commit-fixup&quot;&gt;Git commit --fixup&lt;&#x2F;h2&gt;
&lt;p&gt;Oh my, you need to fix an old commit on your PR ? That&#x27;s a great use of &lt;code&gt;fixup&lt;&#x2F;code&gt;.
You can create a commit that fixes an old commit with &lt;code&gt;git commit -a --fixup 00112233&lt;&#x2F;code&gt;, but who has time to write hashs or copying&#x2F;pasting it ?&lt;&#x2F;p&gt;
&lt;p&gt;For that, you can create a helpful git alias such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# git fix-old number
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Will apply a fixup in the n-old commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fix-old&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!f() { git commit --fixup=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; rev-parse HEAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;))); }; f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that, you can use &lt;code&gt;fit fix-old 3&lt;&#x2F;code&gt; to fix the &lt;code&gt;HEAD~3&lt;&#x2F;code&gt; commit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-rebase-i-interactive-rebase&quot;&gt;Git rebase -i (Interactive rebase)&lt;&#x2F;h2&gt;
&lt;p&gt;Interactive rebase is a powerful command, and much more powerful and human friend with interactive mode.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;rebase-i.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    git rebase -i --autosquash origin&amp;#x2F;master
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Oh well, you can see the &lt;code&gt;autosquash&lt;&#x2F;code&gt; option there, this is something that I do to apply fixups automatically on the correct commits, neat right ?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-reflog&quot;&gt;Git reflog&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;&#x2F;code&gt; is one of the most important commands, it provides access to everything that is tracked or was tracked by git, all commands and actions that was done in the entire history of the project can be accessed, it&#x27;s possible to checkout and see the history of development tree in any moment, before or during a rebase, the history of a branch before a terrible idea in the code, a point between a merge conflict, everything is possible to recover or to start from a previous point, if you have done any git command with tracked files, you&#x27;ll not loose it.&lt;&#x2F;p&gt;
&lt;p&gt;For an awesome experience, I recommend to use &lt;code&gt;tig&lt;&#x2F;code&gt; with &lt;code&gt;reflog&lt;&#x2F;code&gt; (&lt;code&gt;tig reflog&lt;&#x2F;code&gt;) to see a user-friendly history of &lt;code&gt;reflog&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;tig-reflog.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    checkout, rebase, reset, cherry-pick, the history is all there and you can checkout in any hash!
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;&lt;h2 id=&quot;git-add-checkout-stash-patch-p&quot;&gt;Git add&#x2F;checkout&#x2F;stash --patch&#x2F;-p&lt;&#x2F;h2&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;add-p.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    git add -p, add only what you need
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The &lt;code&gt;--patch&lt;&#x2F;code&gt; argument is a great feature, you can use it with &lt;code&gt;add&lt;&#x2F;code&gt;, &lt;code&gt;checkout&lt;&#x2F;code&gt;, &lt;code&gt;stash&lt;&#x2F;code&gt; and others, it allows your to select what you need in your commit,
it helps to avoid adding unnecessary stuff in your commit and only adding what is needed for an atomic patch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-stash&quot;&gt;Git stash&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes we want to remove everything that we are working on, a bunch of uncommitted or unstaged code around your project, but at the same time, we are a big afraid to remove and loose all this code. The answer for your problems is git stash, git will get everything that is not staged.&lt;&#x2F;p&gt;
&lt;p&gt;To visualize what was stashed, you can run &lt;code&gt;git stash show stash@{0} --all&lt;&#x2F;code&gt; where &lt;code&gt;0&lt;&#x2F;code&gt; can be the nth stash. You can also visualize it with &lt;code&gt;tig stash&lt;&#x2F;code&gt;;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to apply any stashed code, you can do it with &lt;code&gt;git stash apply stash@{0}&lt;&#x2F;code&gt;, again, where &lt;code&gt;0&lt;&#x2F;code&gt; can be the nth stash.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-cherry-pick&quot;&gt;Git cherry-pick&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to test some commits or apply in different branches for any reason, &lt;code&gt;git cherry-pick&lt;&#x2F;code&gt; is here for you, with it you can just copy a commit or a range of commits to apply over a specific branch.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;knowing-the-basic-how-the-flow-works&quot;&gt;Knowing the basic (How the flow works)&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This part was the first section of this post, but since I went really deep about how git works, it&#x27;s now in the end as a bonus section.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An alternative title could be: &#x27;Introduction to Git flow&#x27;, I hope that you understand what kind of introduction I&#x27;m talking about :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, if you thought about &#x27;the flow&#x27; as related to branches, I can&#x27;t blame you. First we need to go to the basics, before branches, before anything else.&lt;&#x2F;p&gt;
&lt;p&gt;First we need to create the foundation (&lt;code&gt;git init&lt;&#x2F;code&gt;) for our building (our project&#x2F;source code).&lt;&#x2F;p&gt;
&lt;p&gt;What init will do ? You may ask, well, it creates a folder with a bunch of cool things inside.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;tmp&#x2F;echo &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span&gt;): tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;.git &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Folder where git will store all necessary information to work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;branches &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Deprecated, only exist for compatibility
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Folder for specific configuration files (~&#x2F;.gitconfig friends)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Used for GitWeb
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;HEAD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# A file that has the reference of the current branch (ref&#x2F;heads&#x2F;master)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;hooks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Git hook files (comes with bunch of free examples by default), soon we&amp;#39;ll talk more about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ applypatch-msg.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ commit-msg.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ fsmonitor-watchman.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ post-update.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-applypatch.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-commit.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-merge-commit.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ prepare-commit-msg.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-push.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-rebase.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-receive.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ update.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store information related to folders, files and submodules (it&amp;#39;ll be populated after you add the first file)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store information related to a gitignore, gitattributes and etc, we&amp;#39;re not going to talk about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ exclude
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;objects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# All our references will be here, soon we are going to see how and what
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Bunch of internal things that are stored, not going to talk about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store compressed files, not going to talk about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;refs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# All friend references are here, branches, remotes, tags, stags
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;heads &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Local branches
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;remotes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Remote repositories (it&amp;#39;ll be populated after you add the first remote)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ   &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ origin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Remote name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ       &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ master &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Has the hash of the remote master branch
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;tags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store all tags of your project
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have added some stuff that are not populated from a fresh &lt;code&gt;git init&lt;&#x2F;code&gt; for educational reasons, for more information, check &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;gitrepository-layout&quot;&gt;gitrepository-layout&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, looks complicated right ? It may, but it&#x27;s not. If you are not aware, &lt;code&gt;git&lt;&#x2F;code&gt; description is: &amp;quot;the stupid content tracker&amp;quot;,
I believe that may be a weird thing to describe our magical tool with such words, I prefer to say: &amp;quot;the &lt;em&gt;simple&lt;&#x2F;em&gt; content tracker&amp;quot;, and will explain why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-and-add-a-file&quot;&gt;Create and add a file&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s populate our repository and create a simple commit:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a file: &lt;code&gt;touch README.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Let put something inside to make it more funny.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat README.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Hello!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Now our working directory is not empty, we have something there! But sadly, not tracked by git, we can change that.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add this files to be tracked by git, or indexed: &lt;code&gt;git add README.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Wait a minute, we did something with git right ? Let&#x27;s see what changed:&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.git
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# It&amp;#39;s populated now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;objects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Wow we have some crazy file and folder inside
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ddd6d257e01349d514541981aeecea6b2e741d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;refs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;heads
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;tags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;index&quot;&gt;Index&lt;&#x2F;h2&gt;
&lt;p&gt;This file is just a binary glob with a bunch of basic information about the files and paths that git is tracking.&lt;&#x2F;p&gt;
&lt;p&gt;What is important for us now, index will have the following content:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A header for git internal usage.&lt;&#x2F;li&gt;
&lt;li&gt;The number of indexes (hashes) available.&lt;&#x2F;li&gt;
&lt;li&gt;A list of hashes that contain:
&lt;ol&gt;
&lt;li&gt;The filename&lt;&#x2F;li&gt;
&lt;li&gt;The path&lt;&#x2F;li&gt;
&lt;li&gt;The time that the file was changed&lt;&#x2F;li&gt;
&lt;li&gt;Type of the file (can be a folder, or a virtual file and etc)&lt;&#x2F;li&gt;
&lt;li&gt;The permission of such file (&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;File_permissions_and_attributes_&quot;&gt;linux permission&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;File size&lt;&#x2F;li&gt;
&lt;li&gt;And finally, &lt;strong&gt;our hash (sha1)&lt;&#x2F;strong&gt; [10ddd6d257e01349d514541981aeecea6b2e741d]&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Wait, don&#x27;t you believe me ? Check it here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; index | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000000:&lt;&#x2F;span&gt;&lt;span&gt; 0x44 0x49 0x52 0x43 0x00 0x00 0x00 0x02 0x00 0x00 DIRC......
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00000a:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x01 0x5f 0x41 0x44 0x35 0x1b 0xd6 0x67 0x47 .._AD5..gG
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000014:&lt;&#x2F;span&gt;&lt;span&gt; 0x5f 0x41 0x44 0x35 0x1b 0xd6 0x67 0x47 0x00 0x00 _AD5..gG..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00001e:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x2f 0x00 0x09 0xb1 0x41 0x00 0x00 0x81 0xa4 .&#x2F;...A....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000028:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x00 0x03 0xe8 0x00 0x00 0x03 0xe8 0x00 0x00 ..........
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000032:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x07 0x10 0xdd 0xd6 0xd2 0x57 0xe0 0x13 0x49 ......W..I
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00003c:&lt;&#x2F;span&gt;&lt;span&gt; 0xd5 0x14 0x54 0x19 0x81 0xae 0xec 0xea 0x6b 0x2e ..T.....k.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000046:&lt;&#x2F;span&gt;&lt;span&gt; 0x74 0x1d 0x00 0x09 0x52 0x45 0x41 0x44 0x4d 0x45 t...README
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000050:&lt;&#x2F;span&gt;&lt;span&gt; 0x2e 0x6d 0x64 0x00 0x87 0x87 0x7d 0xde 0xf5 0x59 .md...}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..Y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00005a:&lt;&#x2F;span&gt;&lt;span&gt; 0x22 0x0a 0x7d 0x9c 0x48 0xce 0xde 0x29 0x94 0x60 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.}.H..).`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000064:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; 0x17 0x2c 0xf3 0xcc                               .,..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; 104
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check &lt;code&gt;0x000032&lt;&#x2F;code&gt; until &lt;code&gt;0x000046&lt;&#x2F;code&gt;, you&#x27;ll see our sha1 value &lt;strong&gt;10ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;strong&gt; (&lt;em&gt;0x10 0xdd 0xd6 0xd2&lt;&#x2F;em&gt;) and after that our file &lt;strong&gt;README.md&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to learn how it works and what is inside, check &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;index-format&quot;&gt;here&lt;&#x2F;a&gt; for more information,
and &lt;a href=&quot;https:&#x2F;&#x2F;mincong.io&#x2F;2018&#x2F;04&#x2F;28&#x2F;git-index&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; for an awesome adventure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;objects&quot;&gt;Objects&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, now that we know that &lt;em&gt;index&lt;&#x2F;em&gt; is pointing to this hash, let&#x27;s check the objects folder.
As I said before, &lt;strong&gt;objects&lt;&#x2F;strong&gt; folder will store all the references that exist, it should be our yellow pages. First, let&#x27;s understand how to read it.
There is a folder called &lt;strong&gt;10&lt;&#x2F;strong&gt;, and after that a file that has the name of &lt;strong&gt;ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;strong&gt;, if you put both together you are going to end up with our hash that we found in the &lt;em&gt;index&lt;&#x2F;em&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Just for our curiosity, this hash is calculated based in the following format &lt;code&gt;{TYPE} {SIZE}{NULL_CHAR}{CONTENT}&lt;&#x2F;code&gt;, the type will tell git if the hash points to a tree or a blob, the tree can have multiple blobs (like a folder), and a blob is a file. In our case, the string that defines this hash is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span&gt;hashlib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blob 7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hexdigest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more information, &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Internals-Git-Objects&quot;&gt;check Git Internals Git Objects&lt;&#x2F;a&gt;, it&#x27;s a great friday night reading.&lt;&#x2F;p&gt;
&lt;p&gt;Ok! Now we are ready to commit!&lt;&#x2F;p&gt;
&lt;p&gt;Hey, wait, what is inside of this files object files ?
Oh my, ok, for now, this is where the git magic happens, it&#x27;s a binary object that contains information about the diff, don&#x27;t bother about it, but if you are really willing to know, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gitster&#x2F;git&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;technical&#x2F;pack-format.txt&quot;&gt;check it here&lt;&#x2F;a&gt; (Please open an issue if you know a better and friendly reference).&lt;&#x2F;p&gt;
&lt;p&gt;Back to the commit!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;commit&quot;&gt;Commit&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git commit -sm &amp;quot;First commit&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.git
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# It&amp;#39;s populated now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;objects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Wow we have some crazy file and folder inside
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;08
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ f87015745258743015340c5466fe69c94f7587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ddd6d257e01349d514541981aeecea6b2e741d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ 1d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ 12099363e995c9fc3e1d2cc68b74b8e10c361a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;refs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;heads
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;tags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, we have finished our first commit and now we have two more objects, let&#x27;s check what is inside of each one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git cat-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 1d12099363e995c9fc3e1d2cc68b74b8e10c361a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt; 08f87015745258743015340c5466fe69c94f7587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span&gt; Patrick Jos√© Pereira &amp;lt;myemail&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1598117804&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committer&lt;&#x2F;span&gt;&lt;span&gt; Patrick Jos√© Pereira &amp;lt;myemail&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1598117804&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;First&lt;&#x2F;span&gt;&lt;span&gt; commit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git cat-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 08f87015745258743015340c5466fe69c94f7587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100644&lt;&#x2F;span&gt;&lt;span&gt; blob 10ddd6d257e01349d514541981aeecea6b2e741d    README.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git cat-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 10ddd6d257e01349d514541981aeecea6b2e741d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we have a commit object: &lt;strong&gt;1d12099363e995c9fc3e1d2cc68b74b8e10c361a&lt;&#x2F;strong&gt;, that points to the tree &lt;strong&gt;08f87015745258743015340c5466fe69c94f7587&lt;&#x2F;strong&gt;,
this tree has a single file on it, our old friendly &lt;strong&gt;README.md&lt;&#x2F;strong&gt;, and this same tree says that this blob has the hash &lt;strong&gt;10ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;strong&gt;, and this hash contains the content of &lt;strong&gt;README.md&lt;&#x2F;strong&gt;. Simple Right ?!&lt;&#x2F;p&gt;
&lt;p&gt;As I said, a tree can contain multiple blobs, or more trees, like in the following example:&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;git&amp;#x2F;data-model-2.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    &amp;quot;Git Internals Git Objects&amp;quot; from Git SCM is licensed under CC BY 3.0
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;And after some more commits, we end up with multiple commits, that each commit has a tree, and each tree points to more trees or more blobs!&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;git&amp;#x2F;data-model-3.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    &amp;quot;Git Internals Git Objects&amp;quot; from Git SCM is licensed under CC BY 3.0
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;&lt;h2 id=&quot;wrap-up-git-commit-logic-and-git-internals&quot;&gt;Wrap up git commit logic and git internals&lt;&#x2F;h2&gt;
&lt;p&gt;Git, as a &lt;em&gt;simple content tracker&lt;&#x2F;em&gt;, uses a simple logic to manage all the files, as you saw, git works with the filesystem as a dictionary, where the filenames define the key and the content of such files are the content of this dictionary key, you can think about it as a content-addressable filesystem.&lt;&#x2F;p&gt;
&lt;p&gt;Since we have finished talking about git manages our commits, files and everything else, let us finish this deep introductory part with how the commit and the object creation works.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;git&amp;#x2F;reset-workflow.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    &amp;quot;Reset workflow&amp;quot; from Git SCM is licensed under CC BY 3.0
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The previous is a good simple example of how a commit works, first we have a untracked file in our working directory, we stage this file (&lt;code&gt;git add&lt;&#x2F;code&gt;) and after that we commit this file (&lt;code&gt;git commit&lt;&#x2F;code&gt;) the commit does update the &lt;em&gt;HEAD&lt;&#x2F;em&gt; (the hash where we are right now). And doing a checkout to a different hash (or &lt;em&gt;HEAD&lt;&#x2F;em&gt;) will result in a change of the working directory to match what was commited.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cool-extensions-to-have&quot;&gt;Cool extensions to have:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dandavison&#x2F;delta&quot;&gt;delta&lt;&#x2F;a&gt;: A syntax-highlighting pager for git, diff, and grep output&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tummychow&#x2F;git-absorb&quot;&gt;git-absorb&lt;&#x2F;a&gt;: &lt;code&gt;git commit --fixup&lt;&#x2F;code&gt;, but automatic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;&#x2F;h1&gt;
&lt;p&gt;Check the official Git SCM &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;website&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;git&#x2F;git-scm.com&quot;&gt;repository&lt;&#x2F;a&gt; for images and guidance.&#x27;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>QML Online - Qt 5.15, Kirigami, Breeze and more!</title>
            <pubDate>Mon, 10 Aug 2020 19:20:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/qmlonline-qt515-kirigami-and-more/</link>
            <guid>https://patrickelectric.work/blog/2020/qmlonline-qt515-kirigami-and-more/</guid>
            <description>&lt;p&gt;I&#x27;m happy to announce that &lt;a href=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&quot;&gt;QML Online &lt;&#x2F;a&gt; is now running with the last version of Qt (5.15) and with an &lt;a href=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;?code=PTAEDECcHsFsC5QGsCWkUHMCGsXFlgM4AuAppMKQB44AOANqYcISrA6dXY86+4wGEAFlmIBBWrQB0AR1j0AUMABUC0MtCgAygAUAIgA0AtOBSDotAJ7oMQ4gBVqxRACYADAEYA7KACyWSABjaD8A4hQAO1AAHgJIYgABJAATUiloSAwAPjVVdU1dQyMAGRRA0gjCUiMASVSI8IAzFHJEYoBxHWKjFyk3IwyjelFyXOAFBTZaDOJQAEViOYBXMqRQXoA2SfYZ+cWVwKQpYqxLaCXiQlAPKRdt6fi95dWpAWgGmHor3pdQInm5gI7lNdhkMFIUmlUDYcCh1lIPB4-lcANJoTCwiZomG4KQSBhlUQod4AdUiyWgAHdQABvNSaUAoZKIGDQYgTBmgEBCUhYVKQRDYjG4+zQaD0ABCAXx9EJ4XeAAlefzaQBfemaEDgGoGXwAUUQtHIIloV2IPNAqUaWCW9Fm9GgGDKoEaGVAGGgkQwoEpTKYgUgnCihCE53oyVAACNSKBA80IqQI0tTcRAzgNT6-VoA0HEL7kubQFlQMF6EtYBEyQWhPkAMwZ2gwI3xSyMhol8XlytM82C9HYXEAVQiKEuUgw6GSw9H+Q89c5jYs5GIrcis1dbPISswdkQ-nNUhgSwiyQAFEKBygpNOxxOmTf8r0AKwASg5DIwDsjWHoekgWEpVpQAvWEpHaL8fz-ADyFpDNOWCBoKmIGoyFgKQpllQJRyrXsOzLCscKEOCGXCYhGEQAAiYRRFAfEKOIzRSMYGoEMopB3gAN3IQgiXeejOU5WBoGSH9EFTJZSAYy1-0AyAAHkjQiRBrS+SSBIZFBCF8ColjEyAJPfdSsECeVKkQABtKTORA3ExBM4kojpdTnJIpxKIAJTFWBCH4lznLKd4ADkcFISiOJaSkhk04gjACypfL80BVQAGishkbKvOzTNgxL1LIKhnFAKj3mIYzLgS3LNDi4LYFCorSowIwjQsRgKpclK0s0DK8Xs94csq1yCsorReSCIQ2ty6qQsoqoAkCcbOqSqSAF0M3VeCSqcKDZL7HErzkrjIGGSxtpgpz-OZDtEIK07ICkkBzVIVtAiwKJUkUiM+se0BaCwDAY1lJAY3NGi3WjS1SHjRNLTQUgTPoVseUDKTE3+xAFikLBJEw3iIikY7zmIPRYd6qIAF4yb2KR3J3BxoGKSHZgAfiphnGmIPVkn+0B0eIanac5-6pKEkT6EQABCVk+fzUhs0DCopPeXxhJ-aiIn+y7khk8gFIqUBKfFkWfykkQT0YAA1TSUEjci-mxuUHLJE8qX1ynjytSJoZZlSqh5u2CRe0ynYpSlTxfKQENTcVCEt1gbck+7gCRmNfuSZIvVANxkVAWUSFHUhvJzsU1mjYgyEgTNzUJ7OLGmKoI2IEJXtbNkkauqPFBcxvaB0Pl0-VxA3CkyM2Ub2Be7Tr1B6kxh2Yn-uMGnlybDseep8zwyBMjpCUILxA3nwiITjOC5+sStMKQiBGfqbZdV3bDCymwnshBZMU+dLLtCMWwhfqwgeN6VTmICXobwPjijPgNY+hMpDNHoPQQiekDIDQZN+Q4E5zgnkQO5OGpV1aMEgSgzQr15oZEILAswYsfoBCQotFypYMi7WFFeewPJapSCEDuWUthiAHwyHQ5yFhjKjksIPKQAAOARmh1RSOoZPAB3UbzkLvFOEc7JZHbwaLvBAoAD5dmgafc6RCNKXSYqQAx7JjGcl-sIhR-ZQJKPHJOG8m9jGeUpBYwhVjNA2P-ovYC9ihxqOUc4tRsiXI4JMq9T8MYjHeOcgwgUAS9pSFYQXNInDbDcLsImRwBU+F3XiX5f86cliEDzC-cJk1+BP2IIg5JzDrzBPQghLQKAABeTApC1VKbAKpiVH5YWINuHhiBBnP2rP0gS60ikMj0RWTxcTZkMmAUCY4WBoz0C8cszkFiKHwPqeJNSOz6HikYQ0y8qS2EZK4bTXJTgClTMqvlQqFEUR6D1BNZZMyTmaFWb0E4mztm-L2XAhBL8kHHN+VvM5STuppPYZkoQ2SyDJDybw2FTzcqugaFIaYa42mdKYZcxxOLiDaVTGUchZK8WegaISmMGg3ASKxYlF5lEADEkJECQnSJkL5syfmCqmUK4x-z1lAqWfE0FlDDn6ShbMxJxLQIIpuVku5aKHmYpOeyoq-hIixi8i6N07y9QdlgLAY8IjkqgFbjBVkhcaE52itDGivKwTAAdT5VlPp-y0GVqkRA6KpAkgyMkEkfqRWyNFc5GRlVuojV+v+RuFcpWJRlQciFoAjmLTjblcVctxT0EtqQakaa-IZvBdWSFsjK0jN3Nm+VtboolrLVMkWpAqFPiHkU1IjBsBkGVbiKUrBAilBINo4FxjhibMojobifUKKgAANSgA7b+UQWAfVVCTaIDIsdra2x9gqopgYqiQC4loP+pBwAZBYu8ZSP4qhRuMTG9SebEoJtILulNU7nKVrlcgoheyCBUDYOWethUPAgHGcM0gtNc2LW6iOso47kKoT-epGdnbKLtCPLQEsP56ACpcnFSiL14FGBIGEEjzkd0BD3ZAA98dH2qUQ-GwJV4UNjuipO8tLlsNUIoiNE8tEy7GSELVBotH1JkaKgQMwRhRClXmlJ4gMmBL0eTfuq2LGXRPpPbGqSQqP3UP+loFTRwrQ2jtPM7s1a8Jf0qQuP6stLPoTUSgH8vc0agHMvNV6CYvhvB2AmBoNqAsYtC0hVaGYQvTDC7MctTJEABYiEFwg8X3i0JcgmgMRaNmMB87ExaZjKJqwyxpsqDlyEKaUhc0CWUHKYYEnFKQERppFVmmNDTnJdXCdGvNDTb6BJoKQBg922DcHRIIfx5yJDQyQGpZQw0NCGgaNhUOlh1ypBjYmyeR5lURucg3OXdGIDUliklAEFrnIeS0zfmyWB78tzwZ4bI1OC8ttNNHOQwgBB4FXtsRgWR7jFlTIW2Q-ZVCk05fib49eijmn-aI0DvxUyQCBTkvYA0jIEKgEIMmB4swDWNwgZGC4jcogGoWKAJ8CIPBTPFaKcUEpKd9Tmygutb2G05pOSAAgQNGSzEIDIJYNCfWwfqfd97Jzur3scj6zkkOlsRyQuQGo9XYfrehZofMuEke-Zae8Blf2Af0G0r0pXDIZcNv10RXXBPzhBDqhRBCzQMBLEDL13Kx2iHvAEJhIGl0pZ4tcxZ4yRxjrcTxWUoQp4qgIWSMfcgWXEsvgANwvvieKkLI8JTQCoLd3KAGs1852dzh7jagPLPXRZCipglvqZtQNpPFEW+sLQMkCiq0il+-fexkvLaIrF6qpdNLGW0MaK94GLRJ5qCuFkXX0AtYe1EL7aQAddVkNEFQ7xjDnO-KCc5RVztRUV1ruEp2vQm6pnzThkgQrdVy-ePv4cRMqXTaT+ihHGfO959F4UxtipBUBTJaaMbMZHoGZTJnrkCXrXq3qQAK6sbPqvqD4D6cimZp5ITAopYlgiBRYJZw7qR5afAzpFauYtZlZFQcqmpVakxXCH6cizyFTdRNYc5TJtYda1SUQUiBDlhISRCug+55RuRFSn5bJCHQAiFLTGJ1bfbsGK5FJcGdYUTdZDZTL9YjRzQLRoFHaLTVbvDkLbwFTi70CKHlJ+ayJsGkyj4CT9aeRwDaCkBlxejerKEIQ1Su7u6YBe6kAyHWScY9TZRMG5RaEuHhDqzXABEMj95+Q2EhE+rhGuFREuAxHSLRqpTGIJHNahGiFDRFRaAiCBgRiW5ebpF45BSqF8ECENBUbFH+FTI5EcE6piEURlFYDRHZ7eLNFKE7L9YdHrAVFxG5ZBGKF2FdxtGDG1jDHRqLS965R7ZHhYKgCRJ4IxJ2Eq7LbwKraz6WJEJKoNYig7ZLGYLJCHa+6LSnZAS54lSfB2G26FTXGQCQYfZ9yI5BGOIo6A5-xeiyKnGTarHTb4IlZFKHHwonGR77bnHarxJfo-puh5F+RrEzagm65bHQ67HEG-LglBGqrPb8GZawnQrhRxy2yRboqa60AXCYz2RcS3qEk+ojG5RbETG5QsFYm4osHW6aAryFTa58x8k8nZoWCcl8zdxMndEDTMmaCaLoZ7yrFUjg5FLM5OCmCdoRhIkuSl4OYv6zJ4EUlOBUkXA+oAkrF8YynTIY7ABY445jL46E6SC7Ck5XZRjs7U5RC0706IhM4XYs6SjulsnqSV6jLV6GbeIC5YBC4zii7i7IwnJS5ZqPE+ry745akskRCkKq7lCIRIFa5rb7HQr27faOJxSm5SDfEW6JgoDljCmPEVKTKO6EDO7lCUQehGAJgFQVGYFSn6H6GLRoatp2EGlf6dqEBT7GKHThAUYWLEyBikxtDD6lpSAF5lxwCiiii0DT6QB7Ga4gGL5yFX5UKr6yIb5b6IB8ZTL1lHFXiOIqIPgaAAAsUydmypOyVAJZzS95YSJyGJU5hI9AAg6uSSApUg-5FGQFuZPq4qgKZ+6ZbKYh66N+pUoAAApOsKACzBRAAFLQBCBRB6DQD+F+w4V4VRAyikDfjljdmxHQUXawVbLwV+QDFMA8TcxLqrpIW34nKWk9l6GXHtRrSbzYHtjJaXSJ7vDJ6nCp5wBEE67OTdTFZUGji2wDYpEYDuGLFQnLGXQokgl2G4kpL4lmkwkOiFICXYovZJLM5XZSipqyLXmh7PGvFip+m2WBlMUhm85NpFKRnRki5i4S7KE1JDLS486FlWKpktE7IYk5nlya5ik+rFk3k-ZjhlkdJdKVllG1knLXn27botneHvAe5+GzFFIB5B4f6GpPa-TmbubR6q7TC0BhxZ78WJQjYmYKCqhAA&quot;&gt;initial Kirigami integration with breeze icons&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;qmlonline_kirigami_qt515&#x2F;banner.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is also a couple of updates for quality of life, like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HTML fixes&#x2F;corrections&lt;&#x2F;li&gt;
&lt;li&gt;Better integration with Firefox&lt;&#x2F;li&gt;
&lt;li&gt;New Qt version information label&lt;&#x2F;li&gt;
&lt;li&gt;Support for &lt;code&gt;QtQuick.XmlListModel&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But sadly, with new features we do have new bugs! As I said before, the Kirigami integration is an initial version, there are some know bugs with it, like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;OverlayDrawer has a transparent background (the issue appears to be common in low performance environments)&lt;&#x2F;li&gt;
&lt;li&gt;Kirigami version is a bit old (v5.70), newer versions need Qt future feature for QFuture and friends&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-is-next&quot;&gt;What is next&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ll be working closer with Kirigami to fix these bugs, and the new feature of multiple instances of QML Online on the same webpage will be in hold for now.&lt;&#x2F;p&gt;
&lt;p&gt;As a reminder, please be free to send &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;merge_requests&quot;&gt;Merge Requests&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;new&quot;&gt;feature requests, opinions and issues&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thanks&quot;&gt;Thanks&lt;&#x2F;h1&gt;
&lt;p&gt;I would like to thank all users of QML Online, and the people that are sending kind works about how it&#x27;s improving their workflow and how useful the tool is! That really helps to move the project forward.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>How to rock: First tips</title>
            <pubDate>Sat, 08 Aug 2020 08:28:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/how-to-rock-first-tips/</link>
            <guid>https://patrickelectric.work/blog/2020/how-to-rock-first-tips/</guid>
            <description>&lt;p&gt;After working for some time collaborating with open source&#x2F;free software projects, I started to help newcomers to contribute and push the development further with good practices.&lt;&#x2F;p&gt;
&lt;p&gt;This post will try to itemize some important tips that can be used for software collaboration and personal projects, hopefully it&#x27;ll help you to have a solid ground of good practices and advices for your contributions in a project. It contains information abut good code practices, a simple guide of helpful API design, code organization, comments, naming variables, development flow and self-criticism. Please enjoy, and any feedback (including critics) is much appreciated!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;code-practices&quot;&gt;Code practices&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encapsulate magic variables&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; First version
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_communication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;232&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: What is the meaning of 0 ? What is 1 ? Why 232 ?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Second version
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum class &lt;&#x2F;span&gt;&lt;span&gt;Messages {
&lt;&#x2F;span&gt;&lt;span&gt;      ...
&lt;&#x2F;span&gt;&lt;span&gt;      RequestStatus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;232&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t vid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t cid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_communication&lt;&#x2F;span&gt;&lt;span&gt;(vid, cid, Messages::RequestStatus);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: What is vid ? What is cid ?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Final version
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t vehicle_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t component_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_communication&lt;&#x2F;span&gt;&lt;span&gt;(vehicle_id, component_id, Messages::RequestStatus);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the final version makes everything more readable, we know that we are starting the communication with a vehicle that has an id of 0 and the vehicle probably contains a component with id 1, and while calling this function we are also requesting the status. Much better than 0, 1 and 232 right ?
Doing this will help the reviewers and future developers to understand what is the meaning of such numbers.
It&#x27;s also necessary to avoid variables that contains only single letters or really short abbreviations, is much harder to understand this: $$C^2 = A^2 + B^2$$
over this: $$hypotenuse^2 = catheti_1^2 + catheti_2^2$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid multiple arguments&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; First version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; vehicle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vehicle&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    VehicleType::Car,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    Fuel::Electric,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;613
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: What is the meaning of all this values ?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;           How can we make it better ?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Second version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; vehicle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vehicle&lt;&#x2F;span&gt;&lt;span&gt;(VehicleType::Car)
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setNumberOfTires&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTirePressure&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFuel&lt;&#x2F;span&gt;&lt;span&gt;(Fuel::Electric);
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setWeightInTons&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAutonomyInKm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;613&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; It&amp;#39;s also possible to use aggregate initialization in C++20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and user-defined literals from C++11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; vehicle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vehicle&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= VehicleType::Car,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numberOfTires &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tirePressure &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_psi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_psi&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fuel &lt;&#x2F;span&gt;&lt;span&gt;= Fuel::Electric,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_tn&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;autonomy &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;613&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_km&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both second and C++20&#x2F;C++11 alternatives are valid for a better readability of the code, to choose between both alternatives will depend of how are you going to design your API, probably if you are more familiar with the Qt API, the second version appears to be the most common, the C++20&#x2F;C++11 alternative appears to be a bit more verbose but can be useful to avoid multiple function calls and helpful when dealing with a simpler code base.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encapsulate code when necessary&lt;&#x2F;strong&gt;, try to break functions in a more readable and explanatory way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Original version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start_serial_communication&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if we are open to talk
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!_port || _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xb0001&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serial port is not open!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send a 10ms serial break signal
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send intercalated binary for detection
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send start AT command
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AT+start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: Try to make it more readable encapsulating
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;            some functionalities
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Second version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_port_open&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!_port || _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xb0001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;force_baudrate_detection&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send a 10ms serial break signal
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send intercalated binary for detection
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_message&lt;&#x2F;span&gt;&lt;span&gt;(Message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message_type&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messageFromType&lt;&#x2F;span&gt;&lt;span&gt;(message_type));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start_serial_communication&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_port_open&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serial port is not open!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;force_baudrate_detection&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_message&lt;&#x2F;span&gt;&lt;span&gt;(Message::Start)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the reason behind each block of code is clear now, and with that, the comments are also not necessary anymore, the code is friendly and readable enough that&#x27;s possible to understand it without any comments, the function name does the job for free.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid comments&lt;&#x2F;strong&gt;, that&#x27;s a clickbait, comments are really necessary, but they may be unnecessary when you are doing something that&#x27;s really straightforward, and sometimes when something isn&#x27;t, it&#x27;s better to encapsulate it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;    ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Original version
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;blink_routine&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use the LED builtin
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; led_builtin = LED_BUILTIN;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Configure ping to output
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPinAsOutput&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Loop forever
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Turn the LED on
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOn&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Wait for a second
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Turn the LED off
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOff&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Wait for a second
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before checking the final version, let me talk more about it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each line of code you&#x27;ll have a comment (like a parrot that repeat what we say), and the worst thing about these comments is that the content is exactly what you can read from the code! You can think that this kind of comment is dead code, something that has the same meaning as the code, but it does not run, resulting in a duplicated amount of lines to maintain. If you forget to update each comment for each line of code, you&#x27;ll have a comment that does not match with the code, and this will be pretty confuse for someone that&#x27;s reading it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;One of the most important skills about writing comments, is to know when not to write it!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A comment should bring a value to the code, if you can remove the comment and the code can be understandable by a newcomer, the comment is not important.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Final version
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;blink_routine&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; led_builtin = LED_BUILTIN;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPinAsOutput&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOn&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOff&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a good video about this subject by &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=NLebZ3XT92E&quot;&gt;Walter E. Brown in cppcon 2017, &amp;quot;Whitespace ‚â§ Comments ÔºúÔºú Code&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And to finish, you should not avoid comments, you should understand when comments are necessary, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; From ArduPilot - GPIO_RPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_gpio_mode_alt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alternative&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; **Moved content from cpp for this example**
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t pins_per_register = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Calculates the position of the 3 bit mask in the 32 bits register
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t tree_bits_position_in_register = (pin%pins_per_register)*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;** Creates a mask to enable the alternative function based in the following logic:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * | Alternative Function | 3 bits value |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |:--------------------:|:------------:|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 0      |     0b100    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 1      |     0b101    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 2      |     0b110    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 3      |     0b111    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 4      |     0b011    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 5      |     0b010    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t alternative_value =
&lt;&#x2F;span&gt;&lt;span&gt;        (alternative &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span&gt;? (alternative + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;) : (alternative == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0b00&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;ALT&amp;#39;000&amp;#39;000&amp;#39;000 enables alternative for the 4th pin
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint32_t mask_with_alt = static_cast&amp;lt;uint32_t&amp;gt;(alternative_value) &amp;lt;&amp;lt; tree_bits_position_in_register;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint32_t mask = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0b111 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; tree_bits_position_in_register;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Clear all bits in our position and apply our mask with alt values
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t register_value = _gpio[pin &#x2F; pins_per_register];
&lt;&#x2F;span&gt;&lt;span&gt;    register_value &amp;amp;= ~mask;
&lt;&#x2F;span&gt;&lt;span&gt;    _gpio[pin &#x2F; pins_per_register] = register_value | mask_with_alt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Mostly of the lines in this code can be impossible to understand without access or reading the datasheet directly,
the comments are here to understand what is going on and why, otherwise anyone that&#x27;ll touch this code will need to do a reverse engineer to understand it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;development-flow&quot;&gt;Development flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid creating multiple Pull Requests (PRs)&lt;&#x2F;strong&gt;, update the ones that are still open.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You created a Pull Request called &amp;quot;Add button feature&amp;quot;, some modifications will be necessary after the review process, and for that you&#x27;ll need to update the same branch over creating new ones. That&#x27;s necessary to help the project maintainers to see previous comments and the development history. Creating multiple PRs will only make the maintainers confuse and unable to track old comments, suggestions and your code changes between PRs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-contained commits&lt;&#x2F;strong&gt;, avoid doing multiple tasks in the same commit.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;E.g: You created a commit to fix the serial communication class, and inside the same commit you are doing 3 different tasks, removing trailing spaces, fixing a pointer validation check and a typo in the documentation of a different class. This appear to be silly and bureaucratic, but there are good reasons to break this simple commit and at least 3 different commits, one for the pointer check, a second one for the typo and a third one for the trailing space.&lt;&#x2F;p&gt;
&lt;p&gt;Developers usually track lines history to understand the changes behind a functionality, it&#x27;s common to search with grep history from commits or line changes in specific commits to understand the history of a library, function, class, or a small feature, if the commits start to be polluted with unnecessary changes, this development practice will be almost impossible to be done, since a bunch of unrelated lines will me changed between commits and this technic will be unable to help the dear developer. &lt;code&gt;git blame&lt;&#x2F;code&gt; will also be of little help.&lt;&#x2F;p&gt;
&lt;p&gt;The example was also really simple, but you can imagine what happens if you change different parts of the code, for unrelated things, and a bug appears, technics such as &lt;code&gt;git bisect&lt;&#x2F;code&gt; will still work, but the result will be much harder to understand and to find which line is the one that created such bug.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-sustained PRs&lt;&#x2F;strong&gt;, avoid doing multiple things in the same PR, like different features. They may appear simple with small pieces of code&#x2F;functionality but they can escalate quickly after a review process, and if both features are somehow related or dependently, it&#x27;s recommended to break it in multiple PRs with code to maintain compatibility with current code base.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You have applied a PR for software notifications, and somehow you also added a URL fetch functionality to grab new software versions from the server. After the first review, the maintainer asks to create a more abstracted way to fetch data from a REST API and to deal with network requirements, this will start to convolute the PR, moving the initial idea of the notification feature to an entire network REST API architecture. With that, it&#x27;s better to break the PR in two, one that only provides the notification and a second PR that is used for the REST API related code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your own review&lt;&#x2F;strong&gt;, the final and probably most important tip of all, doing that will train your mind and eyes to detect poor code standards or bad practices, it&#x27;ll also make your PR be merged easily and faster, since you&#x27;ll be able to catch problems before the reviewer feedback. Some reviewers may think that reviewing your own PR is a must, since we are talking about open source projects and free software, you should understand that the people that are reviewing your code are not obligated to do so, the majority are collaborating and donating their own time to help the development and maintenance of such projects, doing your own review is a sign of empathy about the project and maintainer time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;final-comment&quot;&gt;Final comment&lt;&#x2F;h1&gt;
&lt;p&gt;This is the first post of a series that I&#x27;m planning to do. Hope that some of these points may help you in your journey.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MBRoCdtZOYg&quot;&gt;CppCon 2019: Kate Gregory ‚ÄúNaming is Hard: Let&#x27;s Do Better‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=n0Ak6xtVXno&quot;&gt;CppCon 2018: Kate Gregory ‚ÄúSimplicity: Not Just For Beginners‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=kYVxGyido9g&quot;&gt;CppCon 2018: Kate Gregory ‚ÄúWhat Do We Mean When We Say Nothing At All?‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YWiAUUblD34&quot;&gt;CppCon 2017: Lars Knoll ‚ÄúQt as a C++ Framework: History, Present State and Future‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=XkDEzfpdcSg&quot;&gt;CppCon 2017: Kate Gregory ‚Äú10 Core Guidelines You Need to Start Using Now‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.qt.io&#x2F;API_Design_Principles&quot;&gt;API Design Principles - TQtC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;archives&#x2F;qq&#x2F;qq13-apis.html&quot;&gt;Designing Qt-Style C++ APIs - Matthias Ettrich&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.mpi-inf.mpg.de&#x2F;~jblanche&#x2F;api-design.pdf&quot;&gt;The Little Manual of API Design - Jasmin Blanchette&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>QML Online - Can be everywhere!</title>
            <pubDate>Mon, 03 Aug 2020 18:59:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/qmlonline-can-be-everywhere/</link>
            <guid>https://patrickelectric.work/blog/2020/qmlonline-can-be-everywhere/</guid>
            <description>&lt;p&gt;A new feature of QML Online is already available, allows it to run in any site&#x2F;blog with minimal js&#x2F;html code!&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully, our experience with QML examples, tutorials and documentation should change in the near future.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Ff you don&#x27;t know what &lt;a href=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;&quot;&gt;QML Online&lt;&#x2F;a&gt; is, please take a look in my previous posts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;..&#x2F;qmlonline-first-version&quot;&gt;QML Online - First version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;..&#x2F;qmlonline-a-new-home&quot;&gt;QML Online - QML Online - A new home!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-are-we-talking-about&quot;&gt;What are we talking about ?&lt;&#x2F;h1&gt;
&lt;p&gt;QML Online now can be used in any blog or website without much work, like this:&lt;&#x2F;p&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qtloader.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qml.js&quot;&gt;&lt;&#x2F;script&gt;
```js
import QtQuick 2.7
import QtQuick.Controls 2.3
import QtQuick.Layouts 1.12

Rectangle {
    color: &quot;#179AF3&quot;
    anchors.fill: parent

     ColumnLayout{
        anchors.bottom: parent.bottom
        anchors.right: parent.right
        CheckBox {
            checked: true
            text: &quot;Check this!&quot;
        }
        CheckBox {
            text: &quot;Or this!&quot;
        }
    }

    Text {
        text: &quot;KDE&quot;
        font.pixelSize: 80
        font.bold: true
        color: &quot;#82CB38&quot;
        anchors.centerIn: parent
        RotationAnimator on rotation {
            running: true
            loops: Animation.Infinite
            from: 0
            to: 360
            duration: 1500
        }
    }
}
```

&lt;!--
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qtloader.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qml.js&quot;&gt;&lt;&#x2F;script&gt;
--&gt;

&lt;div id=&quot;qmlonline&quot;&gt;&lt;&#x2F;div&gt;

&lt;script type=&#x27;text&#x2F;javascript&#x27;&gt;
    const qmlonline = new QmlOnline(&quot;qmlonline&quot;)
    qmlonline.registerCall({
        qmlMessage: function(msg) {
            console.log(`qml message: ${msg}`)
        },
        qmlError: function(data) {
            console.log(`qml message: ${JSON.stringify(msg)}`)
        },
        posInit: function() {
            qmlonline.setCode(`import QtQuick 2.7
import QtQuick.Controls 2.3
import QtQuick.Layouts 1.12

Rectangle {
    color: &quot;#179AF3&quot;
    anchors.fill: parent

     ColumnLayout{
        anchors.bottom: parent.bottom
        anchors.right: parent.right
        CheckBox {
            checked: true
            text: &quot;Check this!&quot;
        }
        CheckBox {
            text: &quot;Or this!&quot;
        }
    }

    Text {
        text: &quot;KDE&quot;
        font.pixelSize: 80
        font.bold: true
        color: &quot;#82CB38&quot;
        anchors.centerIn: parent
        RotationAnimator on rotation {
            running: true
            loops: Animation.Infinite
            from: 0
            to: 360
            duration: 1500
        }
    }
}`)
        },
    })
    qmlonline.init()
&lt;&#x2F;script&gt;
&lt;p&gt;And how can this new feature be used ?&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s quite simple, check this minimal HTML example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Qml Online minimal example&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qtloader.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qml.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qmlonline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;qml&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    import QtQuick 2.7
&lt;&#x2F;span&gt;&lt;span&gt;    import QtQuick.Controls 2.3
&lt;&#x2F;span&gt;&lt;span&gt;    Rectangle {
&lt;&#x2F;span&gt;&lt;span&gt;        color: &amp;quot;#179AF3&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        anchors.fill: parent
&lt;&#x2F;span&gt;&lt;span&gt;        Text {
&lt;&#x2F;span&gt;&lt;span&gt;            text: &amp;quot;KDE&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            font.pixelSize: 80
&lt;&#x2F;span&gt;&lt;span&gt;            font.bold: true
&lt;&#x2F;span&gt;&lt;span&gt;            color: &amp;quot;#82CB38&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            anchors.centerIn: parent
&lt;&#x2F;span&gt;&lt;span&gt;            RotationAnimator on rotation {
&lt;&#x2F;span&gt;&lt;span&gt;                running: true
&lt;&#x2F;span&gt;&lt;span&gt;                loops: Animation.Infinite
&lt;&#x2F;span&gt;&lt;span&gt;                from: 0
&lt;&#x2F;span&gt;&lt;span&gt;                to: 360
&lt;&#x2F;span&gt;&lt;span&gt;                duration: 1500
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QmlOnline&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qmlonline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registerCall&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;qmlMessage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(msg) {
&lt;&#x2F;span&gt;&lt;span&gt;                console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qml message: &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;}`)
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;qmlError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(data) {
&lt;&#x2F;span&gt;&lt;span&gt;                console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qml error: &lt;&#x2F;span&gt;&lt;span&gt;${JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)}`)
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;posInit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.prototype.slice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getElementsByTagName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.type == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;qml&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).text)
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there is three steps, include both &lt;code&gt;qtloader.js&lt;&#x2F;code&gt; and &lt;code&gt;qml.js&lt;&#x2F;code&gt;, add a &lt;code&gt;div&lt;&#x2F;code&gt; DOM and create a &lt;code&gt;QmlOnline&lt;&#x2F;code&gt; object.
Since I&#x27;m not a web expert, probably there is a better way to organize this approach for the user and bugs may exist.
Be free to create &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;merge_requests&quot;&gt;Merge Requests&lt;&#x2F;a&gt;, or get in touch with &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;new&quot;&gt;feature requests and issues&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-next&quot;&gt;What is next ?&lt;&#x2F;h1&gt;
&lt;p&gt;From my planned objectives, sharing QML Online as library to be available for any website was one of the final points, the only one that&#x27;s still missing is the Kirigami support, that&#x27;s still in progress and hopefully will be finished until the end of the year (if everything goes fine).&lt;&#x2F;p&gt;
&lt;p&gt;There is also a small bug, where &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;3&quot;&gt;it&#x27;s not possible to use multiple QML Online instances on the same webpage&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>QML Online - A new home!</title>
            <pubDate>Tue, 16 Jun 2020 13:55:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/qmlonline-a-new-home/</link>
            <guid>https://patrickelectric.work/blog/2020/qmlonline-a-new-home/</guid>
            <description>&lt;p&gt;A quick update, QML Online now has a new home!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href=&quot;http:&#x2F;&#x2F;qmlonline.kde.org&#x2F;&quot;&gt;qmlonline.kde.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Repository: &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&quot;&gt;invent.kde.org&#x2F;webapps&#x2F;qmlonline&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;what-is-next&quot;&gt;What is next&lt;&#x2F;h1&gt;
&lt;p&gt;Now that the project is under KDE organization, I&#x27;ll start with the planned new capabilities, such as the Kirigami support and the html element to help with online documentation of qml snippets.&lt;&#x2F;p&gt;
&lt;p&gt;And to finish this quick update, be invited to help with the project and send &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;merge_requests&quot;&gt;Merge Requests&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;new&quot;&gt;feature requests and opinions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;konqi.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>QML Online - First stable version!</title>
            <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/qmlonline-first-version/</link>
            <guid>https://patrickelectric.work/blog/2020/qmlonline-first-version/</guid>
            <description>&lt;p&gt;Finally, after working since October and learning a bunch about &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cascading_Style_Sheets&quot;&gt;CSS&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;wikipedia.org&#x2F;wiki&#x2F;HTML&quot;&gt;HTML&lt;&#x2F;a&gt; (sad, right ?) and &lt;a href=&quot;https:&#x2F;&#x2F;emscripten.org&#x2F;&quot;&gt;emscripten&lt;&#x2F;a&gt;, I can happily announce a stable version of &lt;a href=&quot;https:&#x2F;&#x2F;patrickelectric.work&#x2F;qmlonline&#x2F;&quot;&gt;qmlonline&lt;&#x2F;a&gt;!
In this post, I&#x27;m going to show the idea behind the project and some code that may help you with your future adventures.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;the-initial-steps&quot;&gt;The initial steps&lt;&#x2F;h1&gt;
&lt;p&gt;Everything starts with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qhot&quot;&gt;QHot&lt;&#x2F;a&gt;, that I describe as &lt;em&gt;&amp;quot;Hot reload for nested QML files&amp;quot;&lt;&#x2F;em&gt;, a useful tool for anyone that likes to prototype UI elements or ideas with a real-time feedback of what you are typing in QML. I noticed that compiling the project or recalling qml&#x2F;qmlscene tools just to test and check my ideas was pretty annoying and time-consuming, the desire to have something like &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;&quot;&gt;godbolt&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;quick-bench.com&#x2F;&quot;&gt;quick-bench&lt;&#x2F;a&gt; started growing. My objective was something that was closer to these tools but for QML development, and that is how &lt;strong&gt;QHot&lt;&#x2F;strong&gt; was born.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;patrickelectric&#x2F;qhot&#x2F;master&#x2F;doc&#x2F;example.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With QHot working, I started to add some small features in the command line interface to have mostly of the functionalities that exist in qml&#x2F;qmlscene, at least the most important ones for my use.&lt;&#x2F;p&gt;
&lt;p&gt;After some days, the idea of &lt;strong&gt;QHot&lt;&#x2F;strong&gt; working in the browser via webassembly started to grow, and with that, the initial work that would result in &lt;strong&gt;qmlonline&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h1&gt;
&lt;p&gt;After some tweaks around &lt;strong&gt;QHot&lt;&#x2F;strong&gt;, it was possible to have the first version of qmlonline working.
The initial version was entirely made with QML, without HTML components, the editor was a &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qtquick-textedit.html&quot;&gt;TextEdit&lt;&#x2F;a&gt; with a fancy &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qsyntaxhighlighter.html&quot;&gt;QSyntaxHighlighter&lt;&#x2F;a&gt;. The text inside the &lt;strong&gt;TextEdit&lt;&#x2F;strong&gt; was used to create a new component with &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qtqml-qt.html#createQmlObject-method&quot;&gt;Qt.createQmlObject&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;qmlonline-first-version&#x2F;full-qml.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the initial version working, I started to move the interface to HTML, this was necessary to have a better shortcut handling system and a better integration with the browser for user inputs.&lt;&#x2F;p&gt;
&lt;p&gt;The code evolved from a simple &lt;strong&gt;TextEdit&lt;&#x2F;strong&gt; with some controls to a full HTML interface, for that, functions had to be imlpemented to help with the webassembly code to be accessible from the webpage.&lt;&#x2F;p&gt;
&lt;p&gt;From the beginning, I had an initial singleton class called &lt;strong&gt;Util&lt;&#x2F;strong&gt; that was conceived to be some kind of helper class for the QML code. This same class was used to create the interface between the JS and the webassembly via emscripten.&lt;&#x2F;p&gt;
&lt;p&gt;In general, two functions were created, &lt;code&gt;std::string Util::codeEMS() const&lt;&#x2F;code&gt; that returns the code that is being used in the QML to render the user component, and &lt;code&gt;void Util::setCodeEMS(const std::string&amp;amp; code)&lt;&#x2F;code&gt; that sets the code that should be rendered.
To access both functions and the class, &lt;a href=&quot;https:&#x2F;&#x2F;emscripten.org&#x2F;docs&#x2F;porting&#x2F;connecting_cpp_and_javascript&#x2F;embind.html&quot;&gt;EMSCRIPTEN_BINDINGS&lt;&#x2F;a&gt; were used.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;emscripten&#x2F;bind.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EMSCRIPTEN_BINDINGS&lt;&#x2F;span&gt;&lt;span&gt;(util) {
&lt;&#x2F;span&gt;&lt;span&gt;    emscripten::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class_&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Util&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;Util::codeEMS)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;Util::setCodeEMS);
&lt;&#x2F;span&gt;&lt;span&gt;    emscripten::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;Util::self, emscripten::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_raw_pointers&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s probably the most important piece of code to do the integration between the C++ and JS.&lt;&#x2F;p&gt;
&lt;p&gt;And for the QML, well, you can check all QML here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span&gt; 1.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ApplicationWindow &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;window
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qmlonline&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visible&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Connections&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Util
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onCodeChanged&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anchors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;property var userItem&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textComponent&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;destroy&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Qt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createQmlObject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textComponent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onCompleted&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qmlonline&#x2F;blob&#x2F;71342f68f5f99dcf9c2b69051b63ea2e83010ca8&#x2F;src&#x2F;util.cpp&quot;&gt;you can check the source code here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To build the project, I changed my approach a couple of times.
For the first test version, I did my development based in the official documents for &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;wasm.html&quot;&gt;Qt webassembly&lt;&#x2F;a&gt;. But, compiling Qt for each machine that I use was a bit of a pain, so I started to use a docker available from this &lt;a href=&quot;https:&#x2F;&#x2F;www.qt.io&#x2F;blog&#x2F;2019&#x2F;03&#x2F;05&#x2F;using-docker-test-qt-webassembly&quot;&gt;Qt blog post&lt;&#x2F;a&gt;.
And everything was great until newer versions of Qt and emscript were released, and after some time searching, I found this great &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;madmanfred&#x2F;qt-webassembly&#x2F;tags&quot;&gt;repository&#x2F;developer&lt;&#x2F;a&gt; with a couple of Qt containers for webassembly and different emscript versions.&lt;&#x2F;p&gt;
&lt;p&gt;And after building the project, you can always test it with &lt;code&gt;python3 -m http.server&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-i-am&quot;&gt;Where I am&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;qmlonline-first-version&#x2F;final-version.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see from the gif, the basic functionality is still the same from the original version, that was full QML.&lt;&#x2F;p&gt;
&lt;p&gt;The user experience has improved, the interface is now much smoother compared to the full QML version. Qt webassembly is great, but from my tests, the performance was not good and the browser&#x2F;system integration needs improvement to have the same functionality as a normal webpage or application.&lt;&#x2F;p&gt;
&lt;p&gt;Again, remember to check &lt;a href=&quot;https:&#x2F;&#x2F;patrickelectric.work&#x2F;qmlonline&#x2F;&quot;&gt;qmlonline&lt;&#x2F;a&gt; in your browser :)&lt;&#x2F;p&gt;
&lt;p&gt;If you have good QML examples and wish to add those, contact me via email, or create an issue in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qmlonline&quot;&gt;repository&lt;&#x2F;a&gt;, or send a PR, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qmlonline&#x2F;tree&#x2F;gh-pages&#x2F;qml&#x2F;examples&quot;&gt;it&#x27;s really simple&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-i-m-working-on&quot;&gt;What I&#x27;m working on&lt;&#x2F;h1&gt;
&lt;p&gt;There is a couple of things that I&#x27;m still working to improve qmlonline:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Kirigami support&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ajaxorg&#x2F;ace&#x2F;pulls?q=author%3Apatrickelectric+&quot;&gt;Better ace editor integration with QML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A qmlonline element to integrate with websites like Qt&#x2F;KDE website documents&lt;&#x2F;li&gt;
&lt;li&gt;Start to move qmlonline to be a KDE project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Any feature request will be much welcome!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thanks&quot;&gt;Thanks!&lt;&#x2F;h1&gt;
&lt;p&gt;Special thanks to Arthur Turrini, everybody in &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;qtbrasil&quot;&gt;Qt Brasil telegram channel&lt;&#x2F;a&gt; and the KDE members, the project would not be possible without the help and inspiration provided by the developers.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The magic &quot;CH341A USB to I2C&#x2F;IIC&#x2F;SPI&#x2F;UART&#x2F;TTL&#x2F;ISP&#x2F;GPIO adapter, EPP&#x2F;MEM parallel port converter!&quot;</title>
            <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2018/ch341a-dongle/</link>
            <guid>https://patrickelectric.work/blog/2018/ch341a-dongle/</guid>
            <description>&lt;p&gt;A &lt;del&gt;long&lt;&#x2F;del&gt; time ago I saw &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2018&#x2F;02&#x2F;21&#x2F;linux-adds-ch341-gpio&#x2F;&quot;&gt;this in hackaday&lt;&#x2F;a&gt;, after investigation over it on internet, I decided to get one from &lt;a href=&quot;https:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;ALL-IN-1-CH341A-USB-to-SPI-I2C-IIC-UART-TTL-ISP-Serial-Adapter-Module-EPP&#x2F;32878482645.html&quot;&gt;aliexpress&lt;&#x2F;a&gt; ($9).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;front1_1.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Front&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;back1_1.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Back&lt;&#x2F;figcaption&gt;
&lt;p&gt;This dongle should provide:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SPI&#x2F;ISP [Front (4)]&lt;&#x2F;li&gt;
&lt;li&gt;I¬≤C [Front (6)]&lt;&#x2F;li&gt;
&lt;li&gt;UART-TTL [Front (3, 7, 8)]&lt;&#x2F;li&gt;
&lt;li&gt;GPIO [Front (3, 4), Back (1)]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The main CI is the CH341A.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;ch341a.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;CH341DS1.pdf&quot;&gt;CH341DS1 Datasheet (I don&#x27;t know how similar the CIs are)&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;p&gt;In [Back (2)] we have a 3.3V regulator.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;3v3regulator.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;&lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;ds1117.pdf&quot;&gt;AMS1117 Datasheet&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;p&gt;The switch in [Front (1)] will change the USB PID value.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For I¬≤C and SPI: &lt;code&gt;idVendor=1a86, idProduct=5512, bcdDevice= 3.04&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For UART: &lt;code&gt;idVendor=1a86, idProduct=5523, bcdDevice= 3.04&lt;&#x2F;code&gt;
Making the USB driver to select the correct kernel module to deal with it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s also possible to change the output voltage with the voltage selection switches [Front (2, 5)].&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m pretty happy with the hardware, the selection keys makes everything easy to configure and dealing between all the modes sounds pretty possible. It would be better to have all modes at the same time, but that is not possible and does not sound as a terrible thing right now for me. Besides that, the 3.3V regulator can provide up to 1A, and that sounds pretty good also.&lt;&#x2F;p&gt;
&lt;p&gt;The serial interface mode works without any problem as a normal ch341a serial interface (some Arduinos does use it).&lt;&#x2F;p&gt;
&lt;p&gt;The big question is the other modes, like I¬≤C, GPIO and SPI. But the great and beautiful community has already the modules for all functionalities.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;allanbian1017&#x2F;i2c-ch341-usb&quot;&gt;For I¬≤C: allanbian1017&#x2F;i2c-ch341-usb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschorcht&#x2F;i2c-ch341-usb&quot;&gt;For I¬≤C + GPIO: gschorcht&#x2F;i2c-ch341-usb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschorcht&#x2F;spi-ch341-usb&quot;&gt;For SPI + GPIO: gschorcht&#x2F;spi-ch341-usb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I did corrections in all repositories, you can check my forks or the PRs in each one.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-to-compile-load-and-remove-a-module&quot;&gt;How to compile, load and remove a module&lt;&#x2F;h2&gt;
&lt;p&gt;First things first:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To load something that you compiled
&lt;ul&gt;
&lt;li&gt;Compile with &lt;code&gt;make&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Load with &lt;code&gt;sudo insmod module_name.ko&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Unload with &lt;code&gt;sudo rmmod module_name&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;To load a kernel module
&lt;ul&gt;
&lt;li&gt;Load with &lt;code&gt;sudo modprobe module&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Unload with &lt;code&gt;sudo rmmod module&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s what you need to know, for anything else you can use Google.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gpio-and-i2c&quot;&gt;GPIO and I¬≤C&lt;&#x2F;h2&gt;
&lt;p&gt;All GPIOs are provided with &lt;code&gt;sysfs&lt;&#x2F;code&gt;, I would personally prefer something like &lt;a href=&quot;https:&#x2F;&#x2F;wiki.analog.com&#x2F;resources&#x2F;tools-software&#x2F;linux-software&#x2F;libiio&quot;&gt;libiio&lt;&#x2F;a&gt; or providing &lt;code&gt;&#x2F;dev&#x2F;*&lt;&#x2F;code&gt; devices (Like in: &lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;i2c&#x2F;dev-interface&quot;&gt;I¬≤C&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;spi&#x2F;spidev&quot;&gt;SPI&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;(The GPIO in both SPI and I¬≤C are D* Pins in [Back (1)] and CS* in [Front (4)]).&lt;&#x2F;p&gt;
&lt;p&gt;Ok, to check the I¬≤C, you need to make sure that your &lt;strong&gt;i2c-dev&lt;&#x2F;strong&gt; module is loaded, you can search it in &lt;code&gt;&#x2F;lib&#x2F;modules &lt;&#x2F;code&gt; with &lt;code&gt;find . | grep i2c-dev &lt;&#x2F;code&gt; and load it with &lt;code&gt;sudo modprobe i2c-dev&lt;&#x2F;code&gt;, this will allow the modules to show the I¬≤C devices under &lt;code&gt;&#x2F;dev&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;gschorcht&#x2F;i2c-ch341-usb&lt;&#x2F;strong&gt; driver will returns in &lt;code&gt;dmesg&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[314374.047570] usb 1-1.1.1: new full-speed USB device number 109 using xhci_hcd
&lt;&#x2F;span&gt;&lt;span&gt;[314374.138693] usb 1-1.1.1: New USB device found, idVendor=1a86, idProduct=5512, bcdDevice= 3.04
&lt;&#x2F;span&gt;&lt;span&gt;[314374.138702] usb 1-1.1.1: New USB device strings: Mfr=0, Product=0, SerialNumber=0
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148039] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output gpio0 gpio=0 irq=0
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148049] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output gpio1 gpio=1 irq=1
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148055] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output gpio2 gpio=2 irq=2
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148061] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output gpio3 gpio=3 irq=3
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148068] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: input  gpio4 gpio=4 irq=4 (hwirq)
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148074] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: input  gpio5 gpio=5 irq=5
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148080] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: input  gpio6 gpio=6 irq=6
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148086] i2c-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: input  gpio7 gpio=7 irq=7
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148349] i2c-ch341-usb 1-1.1.1:1.0: ch341_i2c_probe: created i2c device &#x2F;dev&#x2F;i2c-8
&lt;&#x2F;span&gt;&lt;span&gt;[314374.148354] i2c-ch341-usb 1-1.1.1:1.0: ch341_i2c_set_speed: Change i2c bus speed to 100 kbps
&lt;&#x2F;span&gt;&lt;span&gt;[314374.149365] i2c-ch341-usb 1-1.1.1:1.0: ch341_usb_probe: connected
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Showing our 8 pins plus the &lt;code&gt;i2c-8&lt;&#x2F;code&gt; device running at 100khz.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to do a simple test with &lt;code&gt;i2cdetect 8&lt;&#x2F;code&gt;. (You can get it from i2c-tools).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;i2cdetect.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;I¬≤C detect running in CH341A and analyzed with saleae.&lt;&#x2F;figcaption&gt;
&lt;p&gt;You can download my i2cdetect test &lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;i2cdetect.logicdata&quot;&gt;raw .logicdata&lt;&#x2F;a&gt; or a &lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;i2cdetect.csv&quot;&gt;csv&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I did a simple test with &lt;code&gt;while true; do echo 1 &amp;gt; &#x2F;sys&#x2F;class&#x2F;gpio&#x2F;gpio0&#x2F;value; echo 0 &amp;gt; &#x2F;sys&#x2F;class&#x2F;gpio&#x2F;gpio0&#x2F;value; done&lt;&#x2F;code&gt;, and the example &lt;code&gt;gpio_output.c&lt;&#x2F;code&gt; file, both were able to toggle the GPIO at average 10khz.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;gpio.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;gpio2.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can download my gpio test &lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;gpio.logicdata&quot;&gt;raw .logicdata&lt;&#x2F;a&gt; or a &lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;gpio.csv&quot;&gt;csv&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spi&quot;&gt;SPI&lt;&#x2F;h2&gt;
&lt;p&gt;For the spi device, you need also to load the device module called &lt;strong&gt;spidev&lt;&#x2F;strong&gt;, &lt;code&gt;sudo modprove spidev&lt;&#x2F;code&gt;. Now with the driver loaded, you should just compile and load the spi module.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[315818.960403] usb 1-1.1.1: USB disconnect, device number 117
&lt;&#x2F;span&gt;&lt;span&gt;[315819.771286] usbcore: registered new interface driver spi-ch341-usb
&lt;&#x2F;span&gt;&lt;span&gt;[315824.287292] usb 1-1.1.1: new full-speed USB device number 118 using xhci_hcd
&lt;&#x2F;span&gt;&lt;span&gt;[315824.381352] usb 1-1.1.1: New USB device found, idVendor=1a86, idProduct=5512, bcdDevice= 3.04
&lt;&#x2F;span&gt;&lt;span&gt;[315824.381358] usb 1-1.1.1: New USB device strings: Mfr=0, Product=0, SerialNumber=0
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391008] spi-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output cs0 SPI slave with cs=0
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391013] spi-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output cs1 SPI slave with cs=1
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391016] spi-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: output cs2 SPI slave with cs=2
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391020] spi-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: input  gpio4 gpio=0 irq=0 (hwirq)
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391023] spi-ch341-usb 1-1.1.1:1.0: ch341_cfg_probe: input  gpio5 gpio=1 irq=1
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391028] spi-ch341-usb 1-1.1.1:1.0: ch341_spi_probe: SPI master connected to SPI bus 0
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391307] spi-ch341-usb 1-1.1.1:1.0: ch341_spi_probe: SPI device &#x2F;dev&#x2F;spidev0.0 created
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391645] spi-ch341-usb 1-1.1.1:1.0: ch341_spi_probe: SPI device &#x2F;dev&#x2F;spidev0.1 created
&lt;&#x2F;span&gt;&lt;span&gt;[315824.391981] spi-ch341-usb 1-1.1.1:1.0: ch341_spi_probe: SPI device &#x2F;dev&#x2F;spidev0.2 created
&lt;&#x2F;span&gt;&lt;span&gt;[315824.392423] spi-ch341-usb 1-1.1.1:1.0: ch341_usb_probe: connected
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The SPI was running with 1.5MHz, the tests was done with python-spidev.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;spidev
&lt;&#x2F;span&gt;&lt;span&gt;spi = spidev.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SpiDev&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;spi.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;to_send = []
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;	to_send += [i]
&lt;&#x2F;span&gt;&lt;span&gt;spi.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xfer&lt;&#x2F;span&gt;&lt;span&gt;(to_send)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More than 30 bytes will give:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Traceback (most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;test.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    spi.xfer(to_send)
&lt;&#x2F;span&gt;&lt;span&gt;TimeoutError: [Errno 110] Connection timed out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m not sure why.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;spi1.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;spi2.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can download my spi test &lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;spi.logicdata&quot;&gt;raw .logicdata&lt;&#x2F;a&gt; or a &lt;a href=&quot;&#x2F;assets&#x2F;ch341a_dongle&#x2F;spi.csv&quot;&gt;csv&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final&quot;&gt;Final&lt;&#x2F;h2&gt;
&lt;p&gt;Yes, I give a positive vote in this device, everything appears to be working with the correct kernel modules.
I don&#x27;t have time right now to test with real devices&#x2F;sensors, but everything shows that will work, I&#x27;ll &lt;strong&gt;try&lt;&#x2F;strong&gt; to update this subject in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.kroah.com&#x2F;lkn&#x2F;&quot;&gt;Linux Kernel in a nutshell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;elixir.bootlin.com&#x2F;linux&#x2F;latest&#x2F;source&#x2F;drivers&#x2F;usb&quot;&gt;Linux Kernel usb &lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.zoobab.com&#x2F;ch341-usb-spi-i2c-uart-isp-dongle&quot;&gt;zoobab from Benjamin Henrion (Thank you very much !)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Raspberry Pi with multiboot (multiple rootfs)</title>
            <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2018/raspberry-mult-boot/</link>
            <guid>https://patrickelectric.work/blog/2018/raspberry-mult-boot/</guid>
            <description>&lt;p&gt;One question that I receive (from my friends, myself and people that install archlinux at 3am) appears every time. &lt;em&gt;How to create a multiboot architecture inside a sdcard for the Raspberry Pi ?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After a boring day doing some unrelated stuff out of home, and with 1h free to do something before sleep and eating (heating my frozen lasagna), why not solving that &lt;del&gt;secular&lt;&#x2F;del&gt; question that follow me ?&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I took some time to think about it: &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Category:Boot_loaders&quot;&gt;maybe doing something related to the archlinux boot section&lt;&#x2F;a&gt;, or with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;noobs&quot;&gt;noobs&lt;&#x2F;a&gt;, and maybe with &lt;a href=&quot;https:&#x2F;&#x2F;www.berryterminal.com&#x2F;doku.php&#x2F;berryboot&quot;&gt;BerryBoot&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With 1h-ish free I did remove all non-trivial ways.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;archlinux: The script will use all the sdcard, changing the scripts will take time.&lt;&#x2F;li&gt;
&lt;li&gt;noobs: It does not appears to be the correct tool, some investigation shows that.&lt;&#x2F;li&gt;
&lt;li&gt;BerryBoot: Appears to be the way to go, but it&#x27;ll take time also to configure everything.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;doing-the-hard-stuff-with-no-sweat&quot;&gt;Doing the hard stuff with no sweat&lt;&#x2F;h1&gt;
&lt;p&gt;So, the idea now is to break everything and try something new. &lt;strong&gt;Use Raspbian image, create a second rootfs partition, change the rootfs in &#x2F;boot&lt;&#x2F;strong&gt;, sounds simple, easy and fast !&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;downloads&#x2F;raspbian&#x2F;&quot;&gt;Download Raspbian&lt;&#x2F;a&gt; (I did everything with Raspbian stretch lite).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Burn the sdcard with Etcher (I like dd, but Etcher is so simple!).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use gparted to create a second partition with the same configuration of the &#x2F;rootfs one ! (rootfs2).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;raspberry_multiboot&#x2F;gparted.png&quot; alt=&quot;LaKademy2017&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Make a copy of our old &lt;em&gt;rootfs&lt;&#x2F;em&gt;. &lt;code&gt;sudo cp &#x2F;mount_point_of_rootfs&#x2F;* &#x2F;mount_point_of_rootfs2&#x2F;* -r&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now, with everything ready, we should update the partuuid values of &lt;code&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;boot&#x2F;cmdline.txt&lt;&#x2F;code&gt;. (&lt;code&gt;sudo blkid&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;dev&#x2F;mmcblk0p1: LABEL=&amp;quot;boot&amp;quot; UUID=&amp;quot;3725-1C05&amp;quot; TYPE=&amp;quot;vfat&amp;quot; PARTUUID=&amp;quot;0155ef5b-01&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;mmcblk0p2: LABEL=&amp;quot;rootfs&amp;quot; UUID=&amp;quot;fd695ef5-f047-44bd-b159-2a78c53af20a&amp;quot; TYPE=&amp;quot;ext4&amp;quot; PARTUUID=&amp;quot;0155ef5b-02&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;mmcblk0p3: LABEL=&amp;quot;rootfs2&amp;quot; UUID=&amp;quot;3da53eaa-4044-4554-8052-0f8c225f7b8c&amp;quot; TYPE=&amp;quot;ext4&amp;quot; PARTUUID=&amp;quot;0155ef5b-03&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;With all partitions mounted, update:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;boot&#x2F;cmdline.txt&lt;&#x2F;code&gt;: partuuid of &lt;code&gt;&#x2F;rootfs&lt;&#x2F;code&gt; to 0155ef5b-&lt;strong&gt;02&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;rootfs&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt;: partuuid of &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt; to 0155ef5b-&lt;strong&gt;01&lt;&#x2F;strong&gt; and &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; to 0155ef5b-&lt;strong&gt;02&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;rootfs2&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt;: partuuid of &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt; to 0155ef5b-&lt;strong&gt;01&lt;&#x2F;strong&gt; and &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; to 0155ef5b-&lt;strong&gt;03&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To change which rootfs you want to boot, just need to change the suffix of the partuuid in &lt;code&gt;&#x2F;boot&#x2F;cmdline.txt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;strong&gt;01&lt;&#x2F;strong&gt; suffix is the boot partition (&lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt;), &lt;strong&gt;02&lt;&#x2F;strong&gt; is our &amp;quot;recovery&amp;quot; partition with 700MB free (&lt;code&gt;&#x2F;rootfs&lt;&#x2F;code&gt;), and our last and probably the &amp;quot;main&amp;quot; partition with 13GB free is the one with &lt;strong&gt;03&lt;&#x2F;strong&gt; suffix (&lt;code&gt;&#x2F;rootfs2&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;This may not work with different kernels because of the initramfs.&lt;&#x2F;li&gt;
&lt;li&gt;If you want to improve this article, please send a &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;patrickelectric.github.io&quot;&gt;PR in my github&lt;&#x2F;a&gt; !&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Streaming with gstreamer</title>
            <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2018/streaming-with-gstreamer/</link>
            <guid>https://patrickelectric.work/blog/2018/streaming-with-gstreamer/</guid>
            <description>&lt;p&gt;Gtreamer is a great tool for everything that need to deal with video transmission, some things you can do with it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add a subtitle while the video is streaming&lt;&#x2F;li&gt;
&lt;li&gt;Get video from file, udp, or v4l and store or transmit it&lt;&#x2F;li&gt;
&lt;li&gt;Get two webcam videos, mix both together in the the same stream (Creating a stereo image)&lt;&#x2F;li&gt;
&lt;li&gt;A RTSP server&lt;&#x2F;li&gt;
&lt;li&gt;And etc..&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;gstreamer&#x2F;stereo.gif&quot; alt=&quot;stereo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;testing-1-2-4-testing&quot;&gt;Testing 1 2 4, Testing !&lt;&#x2F;h1&gt;
&lt;p&gt;This pipeline will create a H264 video test source, encode it, and send via udp, creating the video with &lt;code&gt;videotestsrc&lt;&#x2F;code&gt;, selecting the video input in &lt;code&gt;video&#x2F;&lt;&#x2F;code&gt;, encoding the video to transmit in &lt;code&gt;x264enc&lt;&#x2F;code&gt; and &lt;code&gt;rtph264pay&lt;&#x2F;code&gt;, and transmitting it with &lt;code&gt;udpsink&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 -v videotestsrc ! video&#x2F;x-raw,width=800,height=600,codec=h264,type=video ! videoscale ! videoconvert \
&lt;&#x2F;span&gt;&lt;span&gt;! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;gstreamer&#x2F;testsrc-stream.png&quot; alt=&quot;testsrc&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This one will get the video via udp with &lt;code&gt;udpsrc&lt;&#x2F;code&gt;, &lt;code&gt;rtpjitterbuffer&lt;&#x2F;code&gt; will create a buffer and remove any duplicate packets (removing unnecessary processing), &lt;code&gt;rtph264depay&lt;&#x2F;code&gt; will remove any unnecessary data in the packet and return only the stream, &lt;code&gt;avdec_h264&lt;&#x2F;code&gt; is the H264 decoder by &lt;a href=&quot;https:&#x2F;&#x2F;www.libav.org&#x2F;&quot;&gt;libav&lt;&#x2F;a&gt;, and in the end we shows the output in fpsdisplaysink.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 -vc udpsrc port=5600 close-socket=false multicast-iface=false auto-multicast=true \
&lt;&#x2F;span&gt;&lt;span&gt;! application&#x2F;x-rtp, payload=96 ! rtpjitterbuffer ! rtph264depay ! avdec_h264 \
&lt;&#x2F;span&gt;&lt;span&gt;! fpsdisplaysink  sync=false async=false --verbose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;gstreamer&#x2F;testudpsrc-stream.png&quot; alt=&quot;udpsrc&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;gstreamer&#x2F;gst-launch.bmp&quot; alt=&quot;fpssink&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;get-the-video-from-a-real-device&quot;&gt;Get the video from a real device&lt;&#x2F;h1&gt;
&lt;p&gt;Ok, now, to get the output from your webcam, it&#x27;s necessary to talk see what kind of resolution and encode the hardware can provide us.&lt;&#x2F;p&gt;
&lt;p&gt;This can be done by running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;v4l2-ctl --list-formats-ext
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or, if you want to get from a specif device:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;v4l2-ctl --list-formats-ext --device=0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my webcam, it returns:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ioctl: VIDIOC_ENUM_FMT
&lt;&#x2F;span&gt;&lt;span&gt;	Index       : 0
&lt;&#x2F;span&gt;&lt;span&gt;	Type        : Video Capture
&lt;&#x2F;span&gt;&lt;span&gt;	Pixel Format: &amp;#39;MJPG&amp;#39; (compressed)
&lt;&#x2F;span&gt;&lt;span&gt;	Name        : Motion-JPEG
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 1280x720
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 848x480
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 960x540
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 1280x720
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	Index       : 1
&lt;&#x2F;span&gt;&lt;span&gt;	Type        : Video Capture
&lt;&#x2F;span&gt;&lt;span&gt;	Pixel Format: &amp;#39;YUYV&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;	Name        : YUYV 4:2:2
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 640x480
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 160x120
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 320x180
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 320x240
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 424x240
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 640x360
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 640x480
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.033s (30.000 fps)
&lt;&#x2F;span&gt;&lt;span&gt;		Size: Discrete 1280x720
&lt;&#x2F;span&gt;&lt;span&gt;			Interval: Discrete 0.100s (10.000 fps)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, nice ! Now, this information is pretty important for &lt;del&gt;me&lt;&#x2F;del&gt; us, the &lt;code&gt;video&#x2F;&lt;&#x2F;code&gt; width and height need to be compatible with the ones in this output, and doing so we can create our pipeline !&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 -v v4l2src device=&#x2F;dev&#x2F;video0 ! video&#x2F;x-raw,width=1280,height=720,type=video \
&lt;&#x2F;span&gt;&lt;span&gt;! videoscale ! videoconvert ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600 --verbose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;gstreamer&#x2F;v4lsrc-stream.png&quot; alt=&quot;udpsrc&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The receive done in &lt;strong&gt;Testing&lt;&#x2F;strong&gt; will show the webcam video.&lt;&#x2F;p&gt;
&lt;p&gt;But how gstreamer know which encode we want to use ?
To discover this info, we can enable the debug level, with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;export GST_DEBUG=&amp;quot;*:5&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;developer.ridgerun.com&#x2F;wiki&#x2F;index.php&#x2F;GStreamer_Debugging&quot;&gt;developer.ridgerun&lt;&#x2F;a&gt;, you can find this table that shows what each level mean:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Debug level&lt;&#x2F;th&gt;&lt;th&gt;Type of message&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;none&lt;&#x2F;td&gt;&lt;td&gt;No debug information is output.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;ERROR&lt;&#x2F;td&gt;&lt;td&gt;Logs all fatal errors. These are errors that do not allow the core or elements to perform the requested action. The application can still recover if programmed to handle the conditions that triggered the error.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;WARNING&lt;&#x2F;td&gt;&lt;td&gt;Logs all warnings. Typically these are non-fatal, but user-visible problems are expected to happen.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;INFO&lt;&#x2F;td&gt;&lt;td&gt;Logs all informational messages. These are typically used for events in the system that only happen once, or are important and rare enough to be logged at this level.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;DEBUG&lt;&#x2F;td&gt;&lt;td&gt;Logs all debug messages. These are general debug messages for events that happen only a limited number of times during an object&#x27;s lifetime; these include setup, teardown, change of parameters, ...&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;LOG&lt;&#x2F;td&gt;&lt;td&gt;Logs all log messages. These are messages for events that happen repeatedly during an object&#x27;s lifetime; these include streaming and steady-state conditions.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;bufferdump&lt;&#x2F;td&gt;&lt;td&gt;Hex dump of buffer contents.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 v4l2src device=&#x2F;dev&#x2F;video0 ! videoconvert ! autovideosink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Will open our device and show the output for us, it&#x27;s possible to see in debug level 4 all available video and image formats !&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0:00:00.102958865 16444 0x5646d1572140 INFO        GST_ELEMENT_PADS gstelement.c:917:gst_element_get_static_pad: no such pad &amp;#39;sink&amp;#39; in element &amp;quot;v4l2src0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.103172072 16444 0x5646d1572140 INFO                    v4l2 gstv4l2object.c:1196:gst_v4l2_object_fill_format_list:&amp;lt;v4l2src0:src&amp;gt; got 2 format(s):
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.103214415 16444 0x5646d1572140 INFO                    v4l2 gstv4l2object.c:1202:gst_v4l2_object_fill_format_list:&amp;lt;v4l2src0:src&amp;gt;   YUYV
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.103243944 16444 0x5646d1572140 INFO                    v4l2 gstv4l2object.c:1202:gst_v4l2_object_fill_format_list:&amp;lt;v4l2src0:src&amp;gt;   MJPG
&lt;&#x2F;span&gt;&lt;span&gt;Setting pipeline to PLAYING ...
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.103625400 16444 0x5646d1572140 INFO                    v4l2 gstv4l2object.c:4136:gst_v4l2_object_probe_caps:&amp;lt;v4l2src0:src&amp;gt; probed caps:
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)10&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)640, height=(int)480, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 };
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)640, height=(int)480, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 };
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)640, height=(int)360, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)424, height=(int)240, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)320, height=(int)240, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)320, height=(int)180, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;video&#x2F;x-raw, format=(string)YUY2, width=(int)160, height=(int)120, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;image&#x2F;jpeg, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 };
&lt;&#x2F;span&gt;&lt;span&gt;image&#x2F;jpeg, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 };
&lt;&#x2F;span&gt;&lt;span&gt;image&#x2F;jpeg, width=(int)960, height=(int)540, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1;
&lt;&#x2F;span&gt;&lt;span&gt;image&#x2F;jpeg, width=(int)848, height=(int)480, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, when running our &lt;code&gt;v4l2src&lt;&#x2F;code&gt; pipeline:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0:00:00.036525158 18676 0x55cdad7e4e00 INFO            GST_PIPELINE gstparse.c:337:gst_parse_launch_full: parsing pipeline description &amp;#39;v4l2src device=&#x2F;dev&#x2F;video0 ! video&#x2F;x-raw,width=1280,height=720,type=video ! videoscale ! videoconvert ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.043026669 18676 0x55cdad7e4e00 INFO            GST_PIPELINE grammar.y:652:gst_parse_perform_link: linking some pad of GstV4l2Src named v4l2src0 to some pad of GstVideoScale named videoscale0 (0&#x2F;0) with caps &amp;quot;video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.168796760 18676 0x55cdada61c50 INFO                    v4l2 gstv4l2object.c:4136:gst_v4l2_object_probe_caps:&amp;lt;v4l2src0:src&amp;gt; probed caps: video&#x2F;x-raw, format=(string)YUY2, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)10&#x2F;1; video&#x2F;x-raw, format=(string)YUY2, width=(int)640, height=(int)480, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 }; video&#x2F;x-raw, format=(string)YUY2, width=(int)640, height=(int)480, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 }; video&#x2F;x-raw, format=(string)YUY2, width=(int)640, height=(int)360, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1; video&#x2F;x-raw, format=(string)YUY2, width=(int)424, height=(int)240, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1; video&#x2F;x-raw, format=(string)YUY2, width=(int)320, height=(int)240, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1; video&#x2F;x-raw, format=(string)YUY2, width=(int)320, height=(int)180, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1; video&#x2F;x-raw, format=(string)YUY2, width=(int)160, height=(int)120, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1; image&#x2F;jpeg, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 }; image&#x2F;jpeg, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction){ 30&#x2F;1, 30&#x2F;1 }; image&#x2F;jpeg, width=(int)960, height=(int)540, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1; image&#x2F;jpeg, width=(int)848, height=(int)480, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)30&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.192946256 18676 0x55cdada61c50 INFO               GST_EVENT gstevent.c:814:gst_event_new_caps: creating caps event video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstV4l2Src:v4l2src0.GstPad:src: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.193154229 18676 0x55cdada61c50 INFO               GST_EVENT gstevent.c:814:gst_event_new_caps: creating caps event video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstCapsFilter:capsfilter0.GstPad:src: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.193861576 18676 0x55cdada61c50 INFO               GST_EVENT gstevent.c:814:gst_event_new_caps: creating caps event video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstVideoScale:videoscale0.GstPad:src: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.194599343 18676 0x55cdada61c50 INFO               GST_EVENT gstevent.c:814:gst_event_new_caps: creating caps event video&#x2F;x-raw, width=(int)1280, height=(int)720, framerate=(fraction)10&#x2F;1, format=(string)Y42B, type=(string)video, pixel-aspect-ratio=(fraction)1&#x2F;1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstVideoConvert:videoconvert0.GstPad:src: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, framerate=(fraction)10&#x2F;1, format=(string)Y42B, type=(string)video, pixel-aspect-ratio=(fraction)1&#x2F;1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstX264Enc:x264enc0.GstPad:sink: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, framerate=(fraction)10&#x2F;1, format=(string)Y42B, type=(string)video, pixel-aspect-ratio=(fraction)1&#x2F;1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstVideoConvert:videoconvert0.GstPad:sink: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstVideoScale:videoscale0.GstPad:sink: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstCapsFilter:capsfilter0.GstPad:sink: caps = video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)10&#x2F;1, format=(string)YUY2, pixel-aspect-ratio=(fraction)1&#x2F;1, colorimetry=(string)2:4:7:1, interlace-mode=(string)progressive
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.614072982 18676 0x55cdada61c50 INFO               GST_EVENT gstevent.c:814:gst_event_new_caps: creating caps event video&#x2F;x-h264, codec_data=(buffer)017a001fffe1001d677a001fbcb200a00b7602d4040405000003000100000300148f18324801000568ebccb22c, stream-format=(string)avc, alignment=(string)au, level=(string)3.1, profile=(string)high-4:2:2, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)10&#x2F;1, interlace-mode=(string)progressive, colorimetry=(string)bt709, chroma-site=(string)mpeg2
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstX264Enc:x264enc0.GstPad:src: caps = video&#x2F;x-h264, codec_data=(buffer)017a001fffe1001d677a001fbcb200a00b7602d4040405000003000100000300148f18324801000568ebccb22c, stream-format=(string)avc, alignment=(string)au, level=(string)3.1, profile=(string)high-4:2:2, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)10&#x2F;1, interlace-mode=(string)progressive, colorimetry=(string)bt709, chroma-site=(string)mpeg2
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;GstRtpH264Pay:rtph264pay0.GstPad:sink: caps = video&#x2F;x-h264, codec_data=(buffer)017a001fffe1001d677a001fbcb200a00b7602d4040405000003000100000300148f18324801000568ebccb22c, stream-format=(string)avc, alignment=(string)au, level=(string)3.1, profile=(string)high-4:2:2, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)10&#x2F;1, interlace-mode=(string)progressive, colorimetry=(string)bt709, chroma-site=(string)mpeg2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And as we can see here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;017a001fffe1001d677a001fbcb200a00b7602d4040405000003000100000300148f18324801000568ebccb22c, stream-format=(string)avc, alignment=(string)au, level=(string)3.1, profile=(string)high-4:2:2, width=(int)1280, height=(int)720, pixel-aspect-ratio=(fraction)1&#x2F;1, framerate=(fraction)10&#x2F;1, interlace-mode=(string)progressive, colorimetry=(string)bt709, chroma-site=(string)mpeg2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Gstreamer appears to be using our YUV webcam output (that is 4:2:2) to stream, and using a fps of 10 !&lt;&#x2F;p&gt;
&lt;p&gt;Checking the &lt;code&gt;udpsrc&lt;&#x2F;code&gt; pipeline, we can check the same thing !&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0:00:02.181566030 19432 0x55be0166ead0 INFO               GST_EVENT gstevent.c:814:gst_event_new_caps: creating caps event video&#x2F;x-raw, format=(string)Y42B, width=(int)1280, height=(int)720, interlace-mode=(string)progressive, multiview-mode=(string)mono, multiview-flags=(GstVideoMultiviewFlagsSet)0:ffffffff:&#x2F;right-view-first&#x2F;left-flipped&#x2F;left-flopped&#x2F;right-flipped&#x2F;right-flopped&#x2F;half-aspect&#x2F;mixed-mono, pixel-aspect-ratio=(fraction)1&#x2F;1, chroma-site=(string)mpeg2, colorimetry=(string)bt709, framerate=(fraction)10&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GstPipeline:pipeline0&#x2F;avdec_h264:avdec_h264-0.GstPad:src: caps = video&#x2F;x-raw, format=(string)Y42B, width=(int)1280, height=(int)720, interlace-mode=(string)progressive, multiview-mode=(string)mono, multiview-flags=(GstVideoMultiviewFlagsSet)0:ffffffff:&#x2F;right-view-first&#x2F;left-flipped&#x2F;left-flopped&#x2F;right-flipped&#x2F;right-flopped&#x2F;half-aspect&#x2F;mixed-mono, pixel-aspect-ratio=(fraction)1&#x2F;1, chroma-site=(string)mpeg2, colorimetry=(string)bt709, framerate=(fraction)10&#x2F;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty interesting right ?! Gstreamer did all the dirty job for us.
Now you can play with it, like changing the fps to 30 !&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 -v v4l2src device=&#x2F;dev&#x2F;video0 ! video&#x2F;x-raw,width=1280,height=720,type=video,framerate=30 ! videoscale ! videoconvert ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600 --verbose 2&amp;gt;&amp;amp;1 | grep video&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.011889942 20140 0x55783db05e00 INFO            GST_PIPELINE gstparse.c:337:gst_parse_launch_full: parsing pipeline description &amp;#39;v4l2src device=&#x2F;dev&#x2F;video0 ! video&#x2F;x-raw,width=1280,height=720,type=video,framerate=30 ! videoscale ! videoconvert ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.016560183 20140 0x55783db05e00 INFO            GST_PIPELINE grammar.y:652:gst_parse_perform_link: linking some pad of GstV4l2Src named v4l2src0 to some pad of GstVideoScale named videoscale0 (0&#x2F;0) with caps &amp;quot;video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(int)30&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;0:00:00.018836082 20140 0x55783db05e00 ERROR           GST_PIPELINE grammar.y:730:gst_parse_perform_link: could not link v4l2src0 to videoscale0, neither element can handle caps video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(int)30
&lt;&#x2F;span&gt;&lt;span&gt;WARNING: erroneous pipeline: could not link v4l2src0 to videoscale0, neither element can handle caps video&#x2F;x-raw, width=(int)1280, height=(int)720, type=(string)video, framerate=(int)30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, but wait, YUV can&#x27;t handle this FPS, so we should move to MJPG.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 -v v4l2src device=&#x2F;dev&#x2F;video0 ! image&#x2F;jpeg,width=1280,height=720,type=video,framerate=30&#x2F;1 ! videoscale ! videoconvert ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600 --verbose
&lt;&#x2F;span&gt;&lt;span&gt;WARNING: erroneous pipeline: could not link v4l2src0 to videoscale0, videoscale0 can&amp;#39;t handle caps image&#x2F;jpeg, width=(int)1280, height=(int)720, type=(string)video, framerate=(fraction)30&#x2F;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Effing pipeline ! Oh wait, jpeg is a encode format, to do anything with it (like videoscale), we should decode it first.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 -v v4l2src device=&#x2F;dev&#x2F;video0 ! image&#x2F;jpeg,width=1280,height=720,type=video,framerate=30&#x2F;1 ! jpegdec ! videoscale ! videoconvert ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=5600 --verbose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice, now we can check the &lt;code&gt;udpsrc&lt;&#x2F;code&gt; pipeline output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;videodecoder gstvideodecoder.c:3718:gst_video_decoder_negotiate_pool:&amp;lt;avdec_h264-0&amp;gt; ALLOCATION (1) params: allocation query: 0x7f4e00008680, GstQueryAllocation, caps=(GstCaps)&amp;quot;video&#x2F;x-raw\,\ format\=\(string\)I420\,\ width\=\(int\)1280\,\ height\=\(int\)720\,\ interlace-mode\=\(string\)progressive\,\ multiview-mode\=\(string\)mono\,\ multiview-flags\=\(GstVideoMultiviewFlagsSet\)0:ffffffff:&#x2F;right-view-first&#x2F;left-flipped&#x2F;left-flopped&#x2F;right-flipped&#x2F;right-flopped&#x2F;half-aspect&#x2F;mixed-mono\,\ pixel-aspect-ratio\=\(fraction\)1&#x2F;1\,\ chroma-site\=\(string\)mpeg2\,\ colorimetry\=\(string\)1:4:5:1\,\ framerate\=\(fraction\)30&#x2F;1&amp;quot;, need-pool=(boolean)true, pool=(GArray)NULL, meta=(GArray)NULL, allocator=(GArray)NULL;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome ! 30 FPS !&lt;&#x2F;p&gt;
&lt;p&gt;And that is it, I&#x27;m writing this for my future me. Yes, gstreamer is hard, but maybe this step-by-step guide of &lt;em&gt;tunning&lt;&#x2F;em&gt; a gstreamer pipeline can help !&lt;&#x2F;p&gt;
&lt;h1 id=&quot;bonus&quot;&gt;Bonus !&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;gstreamer&#x2F;simpsonsbonus.jpg&quot; alt=&quot;bonus&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is my stereo camera pipeline:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;gst-launch-1.0 videomixer name=m sink_1::xpos=320 ! videoconvert ! x264enc tune=zerolatency ! rtph264pay \
&lt;&#x2F;span&gt;&lt;span&gt;! udpsink host=127.0.0.1 port=5600 \
&lt;&#x2F;span&gt;&lt;span&gt;v4l2src device=&#x2F;dev&#x2F;video14 ! image&#x2F;jpeg, width=320, height=240 ! jpegdec ! queue ! videoconvert \
&lt;&#x2F;span&gt;&lt;span&gt;! m. v4l2src device=&#x2F;dev&#x2F;video2 ! image&#x2F;jpeg, width=320, height=240 ! jpegdec ! queue ! videoconvert ! m.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is an example code in C++ that gets udp video from gstreamer and show it with OpenCV.&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;patrickelectric&#x2F;5dca1cb7cef4ffa7fbb6fb70dd9f9edc.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;And same example, but with python !&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;patrickelectric&#x2F;443645bb0fd6e71b34c504d20d475d5a.js&quot;&gt;&lt;&#x2F;script&gt;
</description>
        </item>
        <item>
            <title>QT3D, Lines and AtCore</title>
            <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/qt3d-lines-atcore/</link>
            <guid>https://patrickelectric.work/blog/2017/qt3d-lines-atcore/</guid>
            <description>&lt;p&gt;After some time working with Qt3D, now Atelier project is one step closer to have a 3D viewer from the GCode and a realtime draw of printer work.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;atcore.gif&quot; alt=&quot;3D draw with lines&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To know how Qt3D works, you can take a look in this &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qt3d-overview.html&quot;&gt;overview&lt;&#x2F;a&gt;. Where, working with 3D lines was a bit problematic, but I hope to help someone with this job.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h1&gt;
&lt;p&gt;To render, we need our mesh and the material. This simple cube have something more than 1300 lines, and if you are thinking about it, you can can handle big models like this &lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;thing:51415&quot;&gt;Dragon Head&lt;&#x2F;a&gt; with around 706000 lines in 60fps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;dragon.png&quot; alt=&quot;dragon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mesh&quot;&gt;Mesh&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s done with a C++ code, where a 4D vector is used to perform the buffer population, the 4D is because a 3D printer have 4 dimensions in a actuation space, (X, Y, Z and E) where E is the extruder that move the filament to perform the extrusion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;LineMeshGeometry::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMeshGeometry&lt;&#x2F;span&gt;&lt;span&gt;(QList&amp;lt;QVector4D&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertices&lt;&#x2F;span&gt;&lt;span&gt;, Qt3DCore::QNode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;) :
&lt;&#x2F;span&gt;&lt;span&gt;    Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;QGeometry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_positionAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_vertexBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QBuffer&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QBuffer::VertexBuffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    QByteArray vertexBufferData;
&lt;&#x2F;span&gt;&lt;span&gt;    vertexBufferData.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;(vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span&gt;*rawVertexArray = reinterpret_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span&gt;*&amp;gt;(vertexBufferData.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;v : vertices) {
&lt;&#x2F;span&gt;&lt;span&gt;        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        _vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toVector3D&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _vertexBuffer-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setData&lt;&#x2F;span&gt;&lt;span&gt;(vertexBufferData);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAttributeType&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QAttribute::VertexAttribute);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBuffer&lt;&#x2F;span&gt;&lt;span&gt;(_vertexBuffer);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDataType&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QAttribute::Float);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDataSize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QAttribute::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultPositionAttributeName&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addAttribute&lt;&#x2F;span&gt;&lt;span&gt;(_positionAttribute);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;LineMeshGeometry::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;vertexCount&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; _vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done, it&#x27;s possible to easy populate it with a simple class.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;LineMesh::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMesh&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DCore::QNode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;) :
&lt;&#x2F;span&gt;&lt;span&gt;    Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;QGeometryRenderer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_lineMeshGeo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setInstanceCount&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setIndexOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFirstInstance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will allow the line visualization
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPrimitiveType&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QGeometryRenderer::LineStrip);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will be visualized in qml
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qRegisterMetaType&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;QList&amp;lt;QVector4D&amp;gt; &amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QList&amp;lt;QVector4D&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; gcode = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GcodeTo3D&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(gcode, &amp;amp;GcodeTo3D::posFinished, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;LineMesh::posUpdate);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;LineMesh::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;posUpdate&lt;&#x2F;span&gt;&lt;span&gt;(QList&amp;lt;QVector4D&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _vertices = pos;
&lt;&#x2F;span&gt;&lt;span&gt;    _lineMeshGeo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineMeshGeometry&lt;&#x2F;span&gt;&lt;span&gt;(_vertices, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setVertexCount&lt;&#x2F;span&gt;&lt;span&gt;(_lineMeshGeo-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertexCount&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setGeometry&lt;&#x2F;span&gt;&lt;span&gt;(_lineMeshGeo);
&lt;&#x2F;span&gt;&lt;span&gt;    emit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;finished&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;material-and-entity&quot;&gt;Material and Entity&lt;&#x2F;h3&gt;
&lt;p&gt;The material used in the first GIF was &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qt3d-extras-phongmaterial.html&quot;&gt;PhongMaterial&lt;&#x2F;a&gt;, this is simple done with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qml &quot;&gt;&lt;code class=&quot;language-qml&quot; data-lang=&quot;qml&quot;&gt;&lt;span&gt;PhongMaterial {
&lt;&#x2F;span&gt;&lt;span&gt;  id: lineMaterial
&lt;&#x2F;span&gt;&lt;span&gt;  ambient: &amp;quot;darkGreen&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And in the end, the creation of an Entity.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qml &quot;&gt;&lt;code class=&quot;language-qml&quot; data-lang=&quot;qml&quot;&gt;&lt;span&gt;LineMesh {
&lt;&#x2F;span&gt;&lt;span&gt;  id: lineMesh
&lt;&#x2F;span&gt;&lt;span&gt;  enabled: true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;qml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qml &quot;&gt;&lt;code class=&quot;language-qml&quot; data-lang=&quot;qml&quot;&gt;&lt;span&gt;Entity {
&lt;&#x2F;span&gt;&lt;span&gt;  id: lineEntity
&lt;&#x2F;span&gt;&lt;span&gt;  components: [ lineMesh, lineMaterial ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the next week we plan to finish our simple 3D viwer and add it in AtCore test GUI.\
For more info about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kde&#x2F;atcore&quot;&gt;AtCore and Atelier click here !&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;cube2.png&quot; alt=&quot;Cube 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>LaKademy 2017</title>
            <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/lakademy2017/</link>
            <guid>https://patrickelectric.work/blog/2017/lakademy2017/</guid>
            <description>&lt;p&gt;It was my first participation in a KDE sprint event, the famous LaKademy (Latin-America Akademy) in Brazil, Minas Gerais - Belo Horizonte. A great experience to talk, share and learn a bit more about KDE, coffee and software development.&lt;&#x2F;p&gt;
&lt;p&gt;Next I&#x27;ll talk about some points of what I have done during the event.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;first-day&quot;&gt;First day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;AtCore:
&lt;ul&gt;
&lt;li&gt;Some bug corrections of the new AtCore test client, moving from QWidgets to QDockWidget.&lt;&#x2F;li&gt;
&lt;li&gt;Some patchs review.&lt;&#x2F;li&gt;
&lt;li&gt;.gitignore updates to remove .patch and .diff from project.&lt;&#x2F;li&gt;
&lt;li&gt;Update some tasks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop:
&lt;ul&gt;
&lt;li&gt;Solving compilation errors from &lt;code&gt;kdesrc-build --include-dependencies kdevelop&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;syntax-highlighting:
&lt;ul&gt;
&lt;li&gt;Add Arduino extensions (.ino, .pde).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bug correction in breeze-icons, but one was already in review.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;second-day&quot;&gt;Second day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;babe-qt:
&lt;ul&gt;
&lt;li&gt;Code corrections and refactory.&lt;&#x2F;li&gt;
&lt;li&gt;Restore functionality of CMakeLists.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop:
&lt;ul&gt;
&lt;li&gt;Solve some compile corrections.&lt;&#x2F;li&gt;
&lt;li&gt;Attempt to solve more compile problems with --include-dependencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Atcore:
&lt;ul&gt;
&lt;li&gt;Adjustments in GUI.&lt;&#x2F;li&gt;
&lt;li&gt;Update in 3D visualizer of Gcode for 3D printers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;third-day&quot;&gt;Third day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KDE
&lt;ul&gt;
&lt;li&gt;Development of a docker to help the use and development of KDE applications with the help of &lt;code&gt;kdesrc-build&lt;&#x2F;code&gt;.
&lt;ul&gt;
&lt;li&gt;Tested with AtCore, Cantor, GCompris and Kate. (&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;patrickelectric&#x2F;kde&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;)
&lt;ul&gt;
&lt;li&gt;It was only possible with the help of Jedi.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;LaKademy&#x2F;docker.jpg&quot; alt=&quot;Jedi&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;last-day&quot;&gt;Last day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KDE
&lt;ul&gt;
&lt;li&gt;Finalization of kde&#x27;s docker.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop
&lt;ul&gt;
&lt;li&gt;Start to work in copy-paste functionality in KDevelop popup.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was a event completely different of what I thought, a great experience for any developer. Maybe, next time, I can see you in LaKademy 2018 ;)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;LaKademy&#x2F;lakademy2017.jpg&quot; alt=&quot;LaKademy2017&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, OpenOCD and avrdude</title>
            <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-openocd-and-avrdude/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-openocd-and-avrdude/</guid>
            <description>&lt;p&gt;KDev-Embedded  now have OpenOCD integration and a new interface to use avrdude in launcher.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sudar&#x2F;Arduino-Makefile&quot;&gt;Arduino-Makefile&lt;&#x2F;a&gt;, it&#x27;s possible to use a makefile to perform compilation of Arduino projects. In the video one the the examples are used to shows how it is possible to use the new avrdude launcher to execute the upload process.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;
  	&lt;source src=&quot;&#x2F;assets&#x2F;kdev_embedded_openocd&#x2F;arduino1.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;In the avrdude new interface was added more KComboBox to create a more generic and configurable interface helping advanced users.&lt;&#x2F;p&gt;
&lt;p&gt;The OpenOCD support can upload the binary to an embedded plataform and launch the OpenOCD server to perform upload and debugging with GDB. The graphic interface still in development for further improvements.&lt;&#x2F;p&gt;
&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;
  	&lt;source src=&quot;&#x2F;assets&#x2F;kdev_embedded_openocd&#x2F;lm4f2321.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;In the next steps, we are aiming the OpenOCD interface to be more friendly with basic and advanced users, and a new integration with DFU or other tool for embedded systems.&lt;&#x2F;p&gt;
&lt;p&gt;Best regards,&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Graber i3 Tutorial - Finished !</title>
            <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/graber-i3-tutorial-finished/</link>
            <guid>https://patrickelectric.work/blog/2017/graber-i3-tutorial-finished/</guid>
            <description>&lt;p&gt;&lt;strong&gt;3D printing&lt;&#x2F;strong&gt;, also known as &lt;strong&gt;additive manufacturing (AM)&lt;&#x2F;strong&gt;, refers to various processes used to synthesize a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Three-dimensional_space&quot;&gt;three-dimensional&lt;&#x2F;a&gt; object.&lt;sup id=&quot;cite_ref-engineer_1-0&quot; class=&quot;reference&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;3D_printing#cite_note-engineer-1&quot;&gt;[1]&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; In 3D printing, successive layers of material are formed under computer control to create an object.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;These objects can be of almost any shape or geometry, and are produced from a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;3D_modeling&quot; title=&quot;3D modeling&quot;&gt;3D model&lt;&#x2F;a&gt; or other electronic data source. A 3D &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Printer_(computing)&quot; title=&quot;Printer (computing)&quot;&gt;printer&lt;&#x2F;a&gt; is a type of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Industrial_robot&quot; title=&quot;Industrial robot&quot;&gt;industrial robot&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After this Wikipedia preview we can start work !&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Files for the laser cut - &lt;a href=&quot;http:&#x2F;&#x2F;patrickjp.com&#x2F;wp-content&#x2F;uploads&#x2F;2015&#x2F;12&#x2F;graber_lasercut.zip&quot;&gt;graber_lasercut&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;reprap.org&#x2F;wiki&#x2F;Graber_i3&quot;&gt;Bill of Materials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Where and what buy:
&lt;ul&gt;
&lt;li&gt;RAMPS (electronic, China) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;3d-printer-kit-3d-12864-screen-ramps-1-4-4988-2560r-3&#x2F;32212102721.html&quot;&gt;Big screen&lt;&#x2F;a&gt; - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;1pcs-Mega-2560-R3-1pcs-RAMPS-1-4-Controller-5pcs-A4988-Stepper-Driver-Module-RAMPS-1&#x2F;1609182953.html?spm=2114.02020208.3.139.hc309d&amp;amp;ws_ab_test=searchweb201556_1_79_78_77_80,searchweb201644_0,searchweb201560_2&quot;&gt;Small screen&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A4988 (electronic, China, some of drivers can screw up)  - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;5pcs-lot-Reprap-Stepper-Driver-A4988-stepper-motor-driver-free-shipping-drop-shipping&#x2F;1182430536.html&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hotend (extruder, China) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;FreeShipping-Long-distance-3D-Printer-J-head-Hotend-for-1-75mm-3-0mm-E3D-Bowden-Extruder&#x2F;2041826923.html&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;MK8 (extruder, China) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;MK8-Drive-Gear-for-1-75mm-3mm-3D-Printer-Filament-Extruder-Pulley-5mm-Shaft-Reprap-Wholesale&#x2F;32369432482.html&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Cooler (extruder, China) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;DC-12V-2Pin-Mini-Cooling-Fan-40MM-40x40x10mm-Small-Exhaust-Fan-for-3D-Printer-Free-Shipping&#x2F;32444433659.html&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;HeatBed (extruder, China) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;New-3D-Printer-Parts-MK2B-Heatbed-LED-Resistor-Cable-100K-ohm-Thermistors-PCB-Heated-Bed-White&#x2F;32307923385.html?spm=2114.02020208.3.20.i94SJM&amp;amp;ws_ab_test=searchweb201556_1_79_78_77_80,searchweb201644_0,searchweb201560_2&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Gear and Belt (to X and Y axis, China) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;Freeshipping-2pcs-20-teeth-GT2-Pulley-Bore-5mm-2M-GT2-timing-Belt-width-6mm-for-3D&#x2F;32240661027.html&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Endstop (X,Y and Z axis, China. Not tested yet !) - &lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;Endstop-Mechanical-Limit-Switches-3D-Printer-Switch-for-RAMPS-1-4-order-3pcs-price-is-3&#x2F;1750201155.html?spm=2114.02020208.3.41.5JgKni&amp;amp;ws_ab_test=searchweb201556_1_79_78_77_80,searchweb201644_0,searchweb201560_2&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Ok, the total price is:&lt;&#x2F;p&gt;
&lt;table style=&quot;height: 344px;&quot; width=&quot;315&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What&lt;&#x2F;td&gt;
&lt;td&gt; How much&lt;&#x2F;td&gt;
&lt;td&gt;$&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;RAMPS&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;28.5&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;A4988 (optional)&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;5.82&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Hotend&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;4.68&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Cooler&lt;&#x2F;td&gt;
&lt;td&gt;2&lt;&#x2F;td&gt;
&lt;td&gt;0.88&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Mk8&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;0.82&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Heatbed&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;8.1&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Gear and Belt&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;5&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Endstop&lt;&#x2F;td&gt;
&lt;td&gt;3 to 6&lt;&#x2F;td&gt;
&lt;td&gt;0.37&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;&#x2F;td&gt;
&lt;td&gt; &lt;&#x2F;td&gt;
&lt;td&gt;54.17&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;
&lt;&#x2F;table&gt;
&lt;ol&gt;
&lt;li&gt;Ok, now in Brazil:
&lt;ul&gt;
&lt;li&gt;MDF 6mm (810x460mm) - &lt;a href=&quot;https:&#x2F;&#x2F;www.google.com.br&#x2F;maps&#x2F;place&#x2F;MDF+Rei&#x2F;@-27.5997296,-48.5486853,3a,75y,31.28h,90t&#x2F;data=!3m6!1e1!3m4!1si8v0wt9kQey0Y2v9THsBSw!2e0!7i13312!8i6656!4m2!3m1!1s0x0:0xd6f21f935f0f743a!6m1!1e1&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The glass (3 or 2mm  - 215mmx200mm) for Heatbed.&lt;&#x2F;li&gt;
&lt;li&gt;The smooth rods (bill of materials) for X,Y and Z. - &lt;a href=&quot;http:&#x2F;&#x2F;www.marvitubos.com.br&#x2F;&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Motors : 4 of 3Kgf (axis) and 1 of 4Kgf (Extruder). - &lt;a href=&quot;http:&#x2F;&#x2F;produto.mercadolivre.com.br&#x2F;MLB-710362826-motor-de-passo-3-20v-nema-17-impressora-3d-_JM#redirectedFromParent&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;220V to 12 V (20A) - &lt;a href=&quot;http:&#x2F;&#x2F;produto.mercadolivre.com.br&#x2F;MLB-722537296-fonte-bilvot-110-220v-12v-20a-amperes-estabilizada-led-cftv-_JM&quot;&gt;Here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Total price:&lt;&#x2F;p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What&lt;&#x2F;td&gt;
&lt;td&gt;How much&lt;&#x2F;td&gt;
&lt;td&gt;R$&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;MDF 6mm (810 x 460mm)&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;25&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Glass&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;10&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Smooth roads&lt;&#x2F;td&gt;
&lt;td&gt;6&lt;&#x2F;td&gt;
&lt;td&gt;110&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Motors (Nema)&lt;&#x2F;td&gt;
&lt;td&gt;5&lt;&#x2F;td&gt;
&lt;td&gt;190&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;12V 20A&lt;&#x2F;td&gt;
&lt;td&gt;1&lt;&#x2F;td&gt;
&lt;td&gt;50&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;&#x2F;td&gt;
&lt;td&gt; &lt;&#x2F;td&gt;
&lt;td&gt;385&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;The total of everything is R$ 601 (Reais) or $ 151 (Dolar).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;software&quot;&gt;Software&lt;&#x2F;h3&gt;
&lt;p&gt;We need 3 kinds of software (ITS FREE):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;slic3r.org&#x2F;&quot;&gt;The Slicer&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Converts the model into a series of thin layers and produces a G-code file containing instructions tailored to a specific type of 3D printer. This G-code file can then be printed with 3D printing client software (which loads the G-code, and uses it to instruct the 3D printer during the 3D printing process).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The graphical interface - &lt;a href=&quot;http:&#x2F;&#x2F;www.pronterface.com&#x2F;&quot;&gt;Pronterface&lt;&#x2F;a&gt; - &lt;a href=&quot;http:&#x2F;&#x2F;www.repetier.com&#x2F;&quot;&gt;Repetier&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Interface to communicate and use the 3D printer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Firmware for RAMPS - &lt;a href=&quot;http:&#x2F;&#x2F;reprap.org&#x2F;wiki&#x2F;Firmware&quot;&gt;All of them &lt;&#x2F;a&gt; (I am using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarlinFirmware&#x2F;Marlin&quot;&gt;Marlin&lt;&#x2F;a&gt;)
&lt;ul&gt;
&lt;li&gt;Software to burn the Arduino Mega.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;where-am-i&quot;&gt;&lt;del&gt;Where am I ?&lt;&#x2F;del&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;del&gt;Now I am making some moving testes of the axis, speed and acceleration. Until now everything is ok, just need to finish the extruder and start to print !&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-s-working&quot;&gt;It&#x27;s working !&lt;&#x2F;h2&gt;
&lt;p&gt;After some time in Campinas-SP (Brazil) doing my internship on Intel, doing some cool stuffs, I am back to my city and my 3d printer .&lt;&#x2F;p&gt;
&lt;p&gt;Willian (&lt;a href=&quot;http:&#x2F;&#x2F;galvanicloop.com&#x2F;&quot;&gt;The guy with the cool blog in the top header&lt;&#x2F;a&gt;) was working with his own 3d printer and have done a extruder to me (You can see the photos below). After one day wiring the things and some tests, the printer is alive !&lt;&#x2F;p&gt;
&lt;p&gt;To make your printer a cool IoT device, add a respberry with Arch linus, wi-fi adapter and &lt;a href=&quot;http:&#x2F;&#x2F;octoprint.org&#x2F;&quot;&gt;Octoprint&lt;&#x2F;a&gt; to print and view the progress in your browser in computer or cellphone.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;update-03-2020&quot;&gt;Update [03&#x2F;2020]&lt;&#x2F;h1&gt;
&lt;p&gt;I lost a bunch of photos from my old printer in my old server, here you can check a bunch of photos that I got from some friends from my printer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;0.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;1.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;2.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;3.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;4.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;5.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;6.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;7.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;8.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;9.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;10.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;11.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;12.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;13.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;14.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;15.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;16.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;17.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;18.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;19.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;20.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graber&#x2F;21.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, workflow integration</title>
            <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-workflow-integration/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-workflow-integration/</guid>
            <description>&lt;p&gt;After some work in the plugin development, now the project have a strong focus in a better integration with KDevelop workflow. Until now the Board Configuration window have some simple features to perform the upload process for beginner users, it&#x27;s called by the &lt;em&gt;&lt;strong&gt;embedded&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; submenu in the KDevelop toolbar.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Welcome message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow063.png&quot; alt=&quot;arduinowindow063&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Error message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow064.png&quot; alt=&quot;arduinowindow064&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Success message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow065.png&quot; alt=&quot;arduinowindow065&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that the Board Configuration window don&#x27;t follow the integrated workflow of KDevelop, and that&#x27;s what are we doing right now, turning the &lt;strong&gt;KDev-Embedded&lt;&#x2F;strong&gt; an integrated plugin helping programmers that already know how to use the software and how to perform what they want. That&#x27;s the idea behind the &lt;strong&gt;Embedded Launcher&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;KDev-Embedded Embedded Launcher&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;launch_config70.png&quot; alt=&quot;launch_config70&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Embedded Launcher try to help beginners and advanced users with presets and a Board menu, until now the preset ComboBox is disabled until we finish the ARM support and the Board menu configure some others features like MCU, Interface baud rate and Arguments, but the user is free to perform modifications in this fields thanks to KComboBox. After the launcher configuration finished the user can save and execute it to perform  the upload process that shows in KDevelop output.&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;KDevelop output showing the programmer feedback&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;Selection_074.png&quot; alt=&quot;selection074&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The plugin still in development, supporting  Arduino board and being tested only on some boards like Arduino Nano and Mini. In the next week we&#x27;ll start the ARM support.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, The alpha version is coming !</title>
            <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-the-alpha-version-is-coming/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-the-alpha-version-is-coming/</guid>
            <description>&lt;p&gt;The GSoC plan to dominate the world of embedded system developments is near to have his first version !&lt;&#x2F;p&gt;
&lt;p&gt;Today one of the most important steps was performed, the first upload to a microController. The code was a blink compiled with a makefile and uploaded with the KDev-Embedded plugin to an AVR microController (Arduino Nano board).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_the_alpha&#x2F;Selection_024.png&quot; alt=&quot;upload&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the Arduino&#x27;s support done, the plugin will have the first release version and the start of next step (ARM processors).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, Debugging and programming embedded systems</title>
            <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-debugging-and-programming-embedded-systems/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-debugging-and-programming-embedded-systems/</guid>
            <description>&lt;p&gt;The actual embedded system word depends on closed-source IDEs and libraries, with high monetary value and deprecated functionalities. Programmers that would like to use ARM based boards without paying for an IDE will have problems setting up such development ambient and synchronized toolkits.&lt;&#x2F;p&gt;
&lt;p&gt;The main idea of this project is to provide a plugin integrated with KDevelop to help the debugging and programming process of embedded systems like AVR, ARM and x86 based boards.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Since 2011, starting with my electronic engineering graduation the contact with embedded system begun with PIC and ATMEL uC. In 2012 I was accepted in the ROBOTA (competition D&amp;amp;R team) and the ProVANT (Project and Development of UAV in the tilt-rotor configuration), both project working with hardware and software integration.&lt;&#x2F;p&gt;
&lt;p&gt;The development on ProVANT project showed how difficult can be to program an embedded system without using closed source software, It&#x27;s hard to find a descent IDE to develop in such area, ever harder to do it with open-source programs and tools.&lt;&#x2F;p&gt;
&lt;p&gt;But after some time I discovered &lt;a href=&quot;http:&#x2F;&#x2F;openocd.org&#x2F;&quot;&gt;OpenOCD&lt;&#x2F;a&gt; and &lt;em&gt;arm-none-eabi&lt;&#x2F;em&gt; to do my job. But it was such a pain first time to understand and use everything together but after some time everything start to progress.&lt;&#x2F;p&gt;
&lt;p&gt;Now I am at Intel doing my internship to finish my electronic engineering graduation and working on KDevelop for GSOC 2016 project to turn KDevelop into a native system to debug and program embedded systems.&lt;&#x2F;p&gt;
&lt;p&gt;Until now the plugin developed can download and install the Arduino toolkit. This part was strongly based on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mupuf&#x2F;arduide&quot;&gt;ArduIDE&lt;&#x2F;a&gt; project for which I have contributed by updating the Arduino supported version and some corrections of the code, with a great help of Mupuf. Also a window in development to configure that board and interface to program.&lt;&#x2F;p&gt;
&lt;p&gt;The GSOC submission can be found &lt;a href=&quot;http:&#x2F;&#x2F;patrickjp.com&#x2F;wp-content&#x2F;uploads&#x2F;2016&#x2F;04&#x2F;gsoc.pdf&quot;&gt;here&lt;&#x2F;a&gt; for download.&lt;&#x2F;p&gt;
&lt;p&gt;TLDR: The focus of the project is a versatile plugin that can be used for both first travel and experienced programmers in the word of embedded systems !&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll try to update the blog as the project progress.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>FM with IQ Demodulation</title>
            <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/fm-demodulation/</link>
            <guid>https://patrickelectric.work/blog/2016/fm-demodulation/</guid>
            <description>&lt;p&gt;After some time reading¬†about hacking RF signals:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;script src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.0&#x2F;MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.asciimation.co.nz&#x2F;bb&#x2F;2014&#x2F;03&#x2F;19&#x2F;using-rtl-sdr-to-automatically-receive-weather-satellite-images&quot;&gt;Using RTL-SDR to automatically receive weather satellite
images.¬†&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2015&#x2F;09&#x2F;20&#x2F;reverse-engineering-traffic-lights-with-software-defined-radio&#x2F;&quot;&gt;Reverse engineering traffic lights with software defined radio.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2015&#x2F;08&#x2F;22&#x2F;spectrum-painting-on-2-4-ghz&#x2F;&quot;&gt;Spectrum painting on 2.4 GHz.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.rtl-sdr.com&#x2F;adsb-aircraft-radar-with-rtl-sdr&#x2F;&quot;&gt;RTL-SDR Tutorial: Cheap ADS-B aircraft radar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I bought a RTL2832U receiver, that can operate on a range of 70-1700 Mhz.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rtl-1024x576.jpg&quot; alt=&quot;RTL&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;pt.aliexpress.com&#x2F;item&#x2F;USB2-0-Digital-DVB-T-SDR-DAB-FM-HDTV-TV-Tuner-Receiver-Stick-HE-RTL2832U-R820T&#x2F;32357851768.html&quot;&gt;Aliexpress link.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;libraries-and-programs&quot;&gt;Libraries and Programs&lt;&#x2F;h1&gt;
&lt;p&gt;After some time (6 months, hell yeah Brazil...) to receive the package, I begun to install all the programs and libraries to use the RTL.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo apt-get install gnuradio rtl-sdr gqrx-sdr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gnuradio :¬†GNU Radio is a free software development toolkit that provides signal processing blocks to implement software-defined radios and signal processing systems. It
can be used with external RF hardware to create software-defined radios, or without hardware in a simulation-like environment. It is widely used in hobbyist, academic, and
commercial environments to support both wireless communications research and real-world radio systems. (ty wikipedia).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;gnuradio-1024x576.png&quot; alt=&quot;gnuradio interface. (like simulink but isn&#x27;t java)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;rtl-sdr have:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;`&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt; * rtl_adsb: a simple ADS-B decoder for RTL2832 based DVB-T receivers
&lt;&#x2F;span&gt;&lt;span&gt; * rtl_eeprom: an EEPROM programming tool for RTL2832 based DVB-T receivers
&lt;&#x2F;span&gt;&lt;span&gt; * rtl_fm: a narrow band FM demodulator for RTL2832 based DVB-T receivers
&lt;&#x2F;span&gt;&lt;span&gt; * rtl_sdr: an I&#x2F;Q recorder for RTL2832 based DVB-T receivers
&lt;&#x2F;span&gt;&lt;span&gt; * rtl_tcp: an I&#x2F;Q spectrum server for RTL2832 based DVB-T receivers
&lt;&#x2F;span&gt;&lt;span&gt; * rtl_test: a benchmark tool for RTL2832 based DVB-T receivers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;`&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;gqrx-sdr is a RF receive interface that have a displays FFT plot and spectrum waterfall very helpful to detect signals, ¬†the software includes AM, SSB, FM-N, FM-W (mono
and stereo) demodulators and Special FM mode for NOAA APT.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;gqrx-1024x576.png&quot; alt=&quot;gqrx interface.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After installed all the software and plugging the receiver on the computer, we can see that have a Realtek chip with the lsusb feedback.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Bus 001 Device 004: ID 0bda:2838 Realtek Semiconductor Corp. RTL2838 DVB-T
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, now with everything done, ¬†we can capture some data ! We can use the rtl-sdr toolkit.&lt;&#x2F;p&gt;
&lt;pre class=&quot;wiki&quot;&gt;rtl_sdr capture.bin -s 1.8e6 -f 100.9e6&lt;&#x2F;pre&gt;
&lt;p&gt;The capture.bin is the file that will have the IQ data, 1.8¬†MHz is the sample frequency and the frequency that we will look for is 100.9MHz (R√°dio Atl√¢ntida), the radio
station.&lt;&#x2F;p&gt;
&lt;p&gt;Warning !! 1.8e6 samples for second, so take 3~10 seconds because the fast growing of the file.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;to-demodulate-we-need-do-understand-the-modulation&quot;&gt;To demodulate we need do understand the modulation.&lt;&#x2F;h1&gt;
&lt;p&gt;The FM is a method¬†to modulate a message $m(t)$ with the change of¬†the carrier &lt;span class=&quot;MathJax_Preview&quot;&gt;![cos(2\pi f_c t)]&lt;&#x2F;span&gt; &lt;script type=&quot;math&#x2F;tex&quot;&gt;cos(2\pi f_c
t)&lt;&#x2F;script&gt; phase&#x27;s &lt;span
class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_56bc496f2eefa3002ee6d223c29c9fde.gif?w=474&quot; alt=&quot;\phi(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script
type=&quot;math&#x2F;tex&quot;&gt;\phi(t)&lt;&#x2F;script&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Frequency_modulation&quot;&gt;Wikipedia is your friend.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The phase have a relationship with the message, that is¬†&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_6b83d3eb197efdbec2148d2f5cc7f357.gif?w=474&quot; alt=&quot;\phi(t) = 2\pi K_f \int^t_0 m(u)du&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;\phi(t) = 2\pi K_f
\int^t_0 m(u)du&lt;&#x2F;script&gt;. So the simple FM modulator will look like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;fm_modulator-1024x434.png&quot; alt=&quot;FM modulator&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i1.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_4f37783823fc5bcb18cec232f7563904.gif?w=474&quot; alt=&quot;s(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script
type=&quot;math&#x2F;tex&quot;&gt;s(t)&lt;&#x2F;script&gt; data will be transmitted after the modulation.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;demodulate-fm-iq-decomposition&quot;&gt;Demodulate FM, IQ Decomposition.&lt;&#x2F;h1&gt;
&lt;p&gt;The RTL driver give to us the result of the QAM demodulator.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;qam_demodulator-1024x411.png&quot; alt=&quot;QAM Demodulator&quot; &#x2F;&gt; Where:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i2.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_16356e909e03cbcbc0836ab3fd11eab1.gif?w=474&quot; alt=&quot;s(t) = Acos(2\pi f_ct+\phi(t))&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;s(t) = Acos(2\pi
f_ct+\phi(t))&lt;&#x2F;script&gt;
&lt;span
class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_3118bc215041d051756f88e2d18bf8ef.gif?w=474&quot; alt=&quot;cos(a+b)=cos(a)cos(b)-sin(a)*sin(b)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script
type=&quot;math&#x2F;tex&quot;&gt;cos(a+b)=cos(a)cos(b)-sin(a)*sin(b)&lt;&#x2F;script&gt;
&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_58416d3915c13b55a2d0210753885309.gif?w=474&quot; alt=&quot;s(t) = Acos(\phi(t))cos(2\pi f_ct) - Asin(\phi(t))sin(2\pi f_ct)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;s(t) =
Acos(\phi(t))cos(2\pi f_ct) - Asin(\phi(t))sin(2\pi f_ct)&lt;&#x2F;script&gt;
&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i2.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_d276b83fa58624d9e680cbebf1d1b3c6.gif?w=474&quot; alt=&quot;s_I(t) = Acos(\phi(t))&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;s_I(t) =
Acos(\phi(t))&lt;&#x2F;script&gt;
&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_7343408eb92dc0de86d8772fe6d67d52.gif?w=474&quot; alt=&quot;s_Q(t) = Asin(\phi(t))&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;s_Q(t) =
Asin(\phi(t))&lt;&#x2F;script&gt;
&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_db677c59f7c0d6b4974c961e1e755a81.gif?w=474&quot; alt=&quot;\phi(t) = \sphericalangle (s_I(t)+js_Q(y))&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;\phi(t) =
\sphericalangle (s_I(t)+js_Q(y))&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can read more about IQ data &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i1.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_611c418992f5abe9f86e14debafd41b7.gif?w=474&quot; alt=&quot;s_I(t) s_Q(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;s_I(t)
s_Q(t)&lt;&#x2F;script&gt;¬†&lt;a href=&quot;http:&#x2F;&#x2F;www.ni.com&#x2F;tutorial&#x2F;4805&#x2F;en&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now we¬†know how to demodulate the FM, with the equations above, the result is:
&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i2.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_9747dccd22de368a2debc5ee4c346120.gif?w=474&quot; alt=&quot;m(t) = \frac{1}{(2\pi K_f)} \frac{d}{dt}(\sphericalangle (s_I(t)+js_Q(y))&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;m(t) =
\frac{1}{(2\pi K_f)} \frac{d}{dt}(\sphericalangle (s_I(t)+js_Q(y))&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-code&quot;&gt;Some code.&lt;&#x2F;h1&gt;
&lt;p&gt;Now, with the knowledge of how the FM modulation and demodulation work, we can write a octave code that can show to us how the theory work in the real world.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;matlab&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-matlab &quot;&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;%read file and convert data
&lt;&#x2F;span&gt;&lt;span&gt;fid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fopen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;capture2.bin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fread&lt;&#x2F;span&gt;&lt;span&gt;(fid,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uint8=&amp;amp;amp;amp;amp;amp;amp;amp;gt;double&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;y = y-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% transform IQ data to an imaginary number
&lt;&#x2F;span&gt;&lt;span&gt;yi = y(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:end)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;*y(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:end);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% the radio frequency and the sample frequency
&lt;&#x2F;span&gt;&lt;span&gt;freq = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100.9e6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;fs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.8e6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% some math
&lt;&#x2F;span&gt;&lt;span&gt;yang = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;angle&lt;&#x2F;span&gt;&lt;span&gt;(yi);     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% take the angle -pi to pi
&lt;&#x2F;span&gt;&lt;span&gt;yrap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(yang);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% make the correction to continue the angle after pi and -pi
&lt;&#x2F;span&gt;&lt;span&gt;tdev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;diff&lt;&#x2F;span&gt;&lt;span&gt;(yrap);    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% the derivative of theta
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;sound&lt;&#x2F;span&gt;&lt;span&gt;(tdev,fs)        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% give us some music
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can download the capture.bin that I have used and the .m code to octave (open source rules) here:
&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;fm_demodulator_mono.zip&quot;&gt;fm_demodulator_mono&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;audio class=&quot;wp-audio-shortcode&quot; id=&quot;audio-120-1&quot; preload=&quot;none&quot; style=&quot;width: 100%;&quot; controls=&quot;controls&quot;&gt;&lt;source type=&quot;audio&#x2F;wav&quot;
src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;mono_fm.wav?_=1&quot;&gt;&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;mono_fm.wav&quot;&gt;&#x2F;assets&#x2F;fm_demodulation&#x2F;mono_fm.wav&lt;&#x2F;a&gt;&lt;&#x2F;audio&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;stereo-demodulation&quot;&gt;Stereo demodulation.&lt;&#x2F;h1&gt;
&lt;p&gt;Ok, we have done the simpliest demodulation possible, without filters and a lot of things, so now we will use more energy to obtain a &lt;del&gt;very¬†good¬†&lt;&#x2F;del&gt; &lt;del&gt;good&lt;&#x2F;del&gt;
cool sound.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;the-fm-spectrum&quot;&gt;The FM spectrum&lt;&#x2F;h5&gt;
&lt;p&gt;The FM spectrum have more things that I¬†thought.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;30~15kHz L+R (mono), that we have already demodulated.&lt;&#x2F;li&gt;
&lt;li&gt;19kHz, the omnipotent carrier.&lt;&#x2F;li&gt;
&lt;li&gt;23~53kHz, a kind of dsb-sc (double side band suppressed-carrier) with L-R.&lt;&#x2F;li&gt;
&lt;li&gt;55.35~58.65kHz, the RBDS (&lt;del&gt;Rebeldes&lt;&#x2F;del&gt;¬†Radio Data system), ¬†a kind of digital data system.&lt;&#x2F;li&gt;
&lt;li&gt;58.65~76.65kHz, FTF first &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DirectBand&quot;&gt;read this&lt;&#x2F;a&gt;, now ask yourself wth Microsoft is here ??&lt;&#x2F;li&gt;
&lt;li&gt;92+&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_8ed7235e4e012bce81ca345a6a3ea653.gif?w=474&quot; alt=&quot;\Delta f_{as}&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;\Delta
f_{as}&lt;&#x2F;script&gt;,¬†&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Subcarrier&quot;&gt;IDKWII&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;FM-band.png&quot; alt=&quot;tys wikipedia&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;tys wikipedia&lt;&#x2F;figcaption&gt;
&lt;h6 id=&quot;what-is-important&quot;&gt;What is important ?&lt;&#x2F;h6&gt;
&lt;p&gt;The FM modulation appears to be something like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;modulador_FM_tudo1.png&quot;&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;modulador_FM_tudo1.png?resize=474%2C199&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mathematically:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_6c836c3ce0a026c8f7af559b3307bd25.gif?w=474&quot; alt=&quot;s(t) = cos(2\pi f_c+\phi(t))&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;s(t) = cos(2\pi
f_c+\phi(t))&lt;&#x2F;script&gt;
Where &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i2.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_4809f8f5cd44e1b8d6ad5ea6ae932e07.gif?w=474&quot; alt=&quot;\phi(t) = 2 \pi K_f\int[m_R(t)+m_L(t)+ (m_R(t)-m_L(t))cos(4\pi f_c t)+RBDS(t)cos(6\pi f_c t)]&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;\phi(t) = 2 \pi
K_f\int[m_R(t)+m_L(t)+ (m_R(t)-m_L(t))cos(4\pi f_c t)+RBDS(t)cos(6\pi f_c t)]&lt;&#x2F;script&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Yeah, this is a kind of crazy. The IQ data give to us the imaginary part that compose the &lt;span
class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_56bc496f2eefa3002ee6d223c29c9fde.gif?w=474&quot; alt=&quot;\phi(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script
type=&quot;math&#x2F;tex&quot;&gt;\phi(t)&lt;&#x2F;script&gt;, theoretically making the FFT of &lt;span
class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i2.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_b7893f79356a6305f50f23d9aa9194bb.gif?w=474&quot; alt=&quot;\frac{d}{dt}\phi(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script
type=&quot;math&#x2F;tex&quot;&gt;\frac{d}{dt}\phi(t)&lt;&#x2F;script&gt; we can see something like the FM spectrum image.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;matlab&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-matlab &quot;&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% fft
&lt;&#x2F;span&gt;&lt;span&gt; tdfft = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fft&lt;&#x2F;span&gt;&lt;span&gt;(tdev);
&lt;&#x2F;span&gt;&lt;span&gt; P2=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(tdfft&#x2F;ysize);
&lt;&#x2F;span&gt;&lt;span&gt; P1=P2(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:ysize&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; P1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:end-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*P1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:end-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; f=fs*(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:(ysize&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))&#x2F;ysize;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% plot the fft until 59kHz
&lt;&#x2F;span&gt;&lt;span&gt; freqe=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;round&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;59e3&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(f)&#x2F;fs);
&lt;&#x2F;span&gt;&lt;span&gt; freqe=freqe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(f(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:freqe),(P1(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:freqe)))
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;grid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;xlabel &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;freq Hz&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ylabel &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dB&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hold &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 59e3 0 0.02&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; Gab1 = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15e3 0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% R+L
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; Gab1 = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18.5e3 0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18.5e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19.5e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19.5e3 0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% carrier
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; Gab1 = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23e3 0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53e3 0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% R-L
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; Gab1 = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55.35e3 0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55.35e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;58.65e3 0.02&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;58.65e3 0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% RBDS
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),Gab1(:,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;spectrum_FM.png&quot; alt=&quot;fm_demo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All good, all good sir !&lt;&#x2F;p&gt;
&lt;h5 id=&quot;the-carrier-and-his-friends&quot;&gt;The carrier and his friends.&lt;&#x2F;h5&gt;
&lt;p&gt;Like said¬†before, we have the IQ data that can give to us the &lt;span
class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_56bc496f2eefa3002ee6d223c29c9fde.gif?w=474&quot; alt=&quot;\phi(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script
type=&quot;math&#x2F;tex&quot;&gt;\phi(t)&lt;&#x2F;script&gt; and with a derivative we can have &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_9dbb40352d1c6dc23d22845e9dc63490.gif?w=474&quot; alt=&quot;m_R(t)+m_L(t)+ (m_R(t)-m_L(t))cos(4\pi f_c t)+RBDS(t)cos(6\pi f_c t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;m_R(t)+m_L(t)+
(m_R(t)-m_L(t))cos(4\pi f_c t)+RBDS(t)cos(6\pi f_c t)&lt;&#x2F;script&gt;. Applying a low-pass filter on the L+R, a band-pass filter on the carrier, L-R and RBDS we can have a clear
signal of each data.&lt;&#x2F;p&gt;
&lt;p&gt;With the frequencies specifications, the filter was done:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;matlab&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-matlab &quot;&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;%R+L
&lt;&#x2F;span&gt;&lt;span&gt;[b,a] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;butter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16e3&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;fs,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;low&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;R_p_L = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(b,a,tdev);
&lt;&#x2F;span&gt;&lt;span&gt;hhhh=R_p_L;
&lt;&#x2F;span&gt;&lt;span&gt;plote
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;%carrier
&lt;&#x2F;span&gt;&lt;span&gt;[b,a] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;butter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18.5e3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19.5e3&lt;&#x2F;span&gt;&lt;span&gt;]&#x2F;fs,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bandpass&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;carrier = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(b,a,tdev);
&lt;&#x2F;span&gt;&lt;span&gt;hhhh=carrier;
&lt;&#x2F;span&gt;&lt;span&gt;plote
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;% R-L
&lt;&#x2F;span&gt;&lt;span&gt;[b,a] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;butter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23e3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53e3&lt;&#x2F;span&gt;&lt;span&gt;]&#x2F;fs,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bandpass&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;R_l_L = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(b,a,tdev);
&lt;&#x2F;span&gt;&lt;span&gt;hhhh=R_l_L;
&lt;&#x2F;span&gt;&lt;span&gt;plote
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;%RBDS
&lt;&#x2F;span&gt;&lt;span&gt;[b,a] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;butter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55.35e3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;58.65e3&lt;&#x2F;span&gt;&lt;span&gt;]&#x2F;fs,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bandpass&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;rbds = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(b,a,tdev);
&lt;&#x2F;span&gt;&lt;span&gt;hhhh=rbds;
&lt;&#x2F;span&gt;&lt;span&gt;plote
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &#x27;plote&#x27; code plot the fft of the signal.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_26fa20951173011eb56e82a0520beefd.gif?w=474&quot; alt=&quot;m_R(t)+m_L(t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;m_R(t)+m_L(t)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rpl.png&quot;&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rpl.png?resize=474%2C356&quot; alt=&quot;rpl&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_fbe7de253c63357b060a5ba2c244065d.gif?w=474&quot; alt=&quot;cos(2\pi f_c t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;cos(2\pi f_c t)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;carrier.png&quot;&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;carrier.png?resize=474%2C356&quot; alt=&quot;carrier&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_02ecbfc1758b061f8ba5a2532b1cf418.gif?w=474&quot; alt=&quot;(m_R(t)-m_L(t))cos(4\pi f_c t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;(m_R(t)-m_L(t))cos(4\pi f_c t)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rll.png&quot;&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rll.png?resize=474%2C356&quot; alt=&quot;rll&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http:&#x2F;&#x2F;i0.wp.com&#x2F;patrickjp.com&#x2F;wp-content&#x2F;plugins&#x2F;latex&#x2F;cache&#x2F;tex_6147ad2cc82784588b521e1a4a7514e4.gif?w=474&quot; alt=&quot;RBDS(t)cos(6\pi f_c t)&quot; &#x2F;&gt;&lt;&#x2F;span&gt;&lt;script type=&quot;math&#x2F;tex&quot;&gt;RBDS(t)cos(6\pi f_c t)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rbds.png&quot;&gt;&lt;img src=&quot;&#x2F;assets&#x2F;fm_demodulation&#x2F;rbds.png?resize=474%2C356&quot; alt=&quot;rbds&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To be continue..&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>FTDI problem: PID 0000</title>
            <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/ftdi-problem-pid-0000/</link>
            <guid>https://patrickelectric.work/blog/2016/ftdi-problem-pid-0000/</guid>
            <description>&lt;p&gt;On¬†29 September 2014, FTDI released an updated version of their USB-to-Serial driver, It was reported by some users that the updated can brick some fake FTDIs chips, by changing their ID to 0000.¬†After some time, the windows update the version of the drive, now this problem is happening a lot in the last days.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;solving-the-problem&quot;&gt;Solving the problem&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Use a linux machine (Ubuntu, mint and etc)&lt;&#x2F;li&gt;
&lt;li&gt;Download¬†&lt;a href=&quot;http:&#x2F;&#x2F;rtr.ca&#x2F;ft232r&#x2F;ft232r_prog-1.24.tar.gz&quot;&gt;ft232r_prog-1.24.tar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Now install make, gcc and libftdi-dev ($ sudo apt-get install make gcc libftdi-dev)&lt;&#x2F;li&gt;
&lt;li&gt;Unzip and compile the ft232r_prog ($ tar -xvf ft232r_prog-1.24.tar.gz, $ make)&lt;&#x2F;li&gt;
&lt;li&gt;Connect the FTDI on your computer.&lt;&#x2F;li&gt;
&lt;li&gt;Now change the ID (sudo .&#x2F;ft232r_prog --old-pid 0x0000 --new-pid 0x6001)&lt;&#x2F;li&gt;
&lt;li&gt;Disconnect and connect again the FTDI and run the lsusb command, now you will see that de id will be 6001.&lt;&#x2F;li&gt;
&lt;li&gt;Have fun !&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h6 id=&quot;tldr&quot;&gt;TLDR&lt;&#x2F;h6&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; wget http:&#x2F;&#x2F;rtr.ca&#x2F;ft232r&#x2F;ft232r_prog-1.24.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -xvf&lt;&#x2F;span&gt;&lt;span&gt; ft232r_prog-1.24.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd ft232r*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt-get install make gcc libftdi-dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo .&#x2F;ft232r_prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --old-pid&lt;&#x2F;span&gt;&lt;span&gt; 0x0000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --new-pid&lt;&#x2F;span&gt;&lt;span&gt; 0x6001
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>Starting with Intel¬Æ Edison Platform</title>
            <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/starting-with-intel-edison-platform/</link>
            <guid>https://patrickelectric.work/blog/2016/starting-with-intel-edison-platform/</guid>
            <description>&lt;p&gt;The Edison Platform is a little computer with all necessary system and hardware to provide a good experiment, we have: wi-fi, bluetooth, serial, io pins and alot more.&lt;&#x2F;p&gt;
&lt;p&gt;As we see the Edson board is an x86-32 architecture, 4 gigabytes to store our files, 1 gigabyte of ram to execute¬†our applications, 2 processing cores to allow the development of parallel programs.¬†this is a¬†development platform with higher performance compared to Respaberry Pi ¬†and 1&#x2F;40 of its volume.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;starting&quot;&gt;Starting&lt;&#x2F;h1&gt;
&lt;p&gt;You will need two ¬†USBs (&lt;a href=&quot;http:&#x2F;&#x2F;www.usbfirewire.com&#x2F;usb_cables_a_to_micro-b_non-angled_67.html&quot;&gt;micro B&lt;&#x2F;a&gt;), one is for serial communication and the other is for power, ethernet, arduino upload and storage device.&lt;&#x2F;p&gt;
&lt;p&gt;Connecting the two cables in your computer, you can use &lt;a href=&quot;http:&#x2F;&#x2F;portableapps.com&#x2F;apps&#x2F;internet&#x2F;putty_portable&quot;&gt;Putty&lt;&#x2F;a&gt;¬†if you are using¬†windows, or you can use screenin your linux computer.&lt;&#x2F;p&gt;
&lt;pre&gt;$ screen &#x2F;dev&#x2F;ttyUSB0 115200&lt;&#x2F;pre&gt;
&lt;p&gt;After connect, type two times the enter key and now we can access the terminal from the &lt;a href=&quot;https:&#x2F;&#x2F;www.yoctoproject.org&#x2F;&quot;&gt;Yocto Linux&lt;&#x2F;a&gt;. The login can be root&#x2F;root or edison&#x2F;edison.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;&#x2F;h1&gt;
&lt;p&gt;Now, we can configure Edison with the command &lt;code&gt;$ configure_edison --setup &lt;&#x2F;code&gt;,¬†we can configure almost everything including the Wi-Fi. The board have already an ssh-server enabled by default.&lt;&#x2F;p&gt;
&lt;pre&gt;$ configure_edison --setup&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;installing-programs&quot;&gt;Installing programs&lt;&#x2F;h1&gt;
&lt;p&gt;The Yocto don&#x27;t have a package manager with the usual programs, so we need to download the¬†*.deb file of the x86-32 architecture.&lt;&#x2F;p&gt;
&lt;p&gt;An example, to install nemo (the text editor):&lt;&#x2F;p&gt;
&lt;pre&gt;$ wget http:&#x2F;&#x2F;www.nano-editor.org&#x2F;dist&#x2F;v2.2&#x2F;nano-2.2.0.tar.gz
$ tar -xvf nano-2.2.0.tar.gz
$ cd  nano*
$ .&#x2F;configure
$ make
$ make install&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;installing-programs-with-opkg&quot;&gt;Installing programs with opkg&lt;&#x2F;h1&gt;
&lt;p&gt;The Intel have a &lt;a href=&quot;https:&#x2F;&#x2F;software.intel.com&#x2F;en-us&#x2F;iot&quot;&gt;repository&lt;&#x2F;a&gt; from¬†the Yocto projecto to the Edison, we can upgrade or system repository to use the Intel IoT devkit.&lt;&#x2F;p&gt;
&lt;pre&gt;nano &#x2F;etc&#x2F;opkg&#x2F;base-feeds.conf&lt;&#x2F;pre&gt;
&lt;p&gt;Inside this file, we need to write the local of the Intel repositories.&lt;&#x2F;p&gt;
&lt;pre&gt;src all http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;1.1&#x2F;iotdk&#x2F;all
src x86 http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;1.1&#x2F;iotdk&#x2F;x86
src i586    http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;1.1&#x2F;iotdk&#x2F;i586&lt;&#x2F;pre&gt;
&lt;p&gt;After that, we can upgrade or package manager database.&lt;&#x2F;p&gt;
&lt;pre&gt;opkg update&lt;&#x2F;pre&gt;
&lt;p&gt;And install something util.&lt;&#x2F;p&gt;
&lt;pre&gt;opkg install git&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>The real tutorial for Galileo Gen 2 Board</title>
            <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/the-real-tutorial-for-galileo-gen-2-board/</link>
            <guid>https://patrickelectric.work/blog/2016/the-real-tutorial-for-galileo-gen-2-board/</guid>
            <description>&lt;p&gt;Some of the tutorials on the internet are outdated, and cause a lot of problems to start on the develop of the Galileo Gen 2 Board, to solve this, we will explain what you&#x27;ll need to do to make the best setup possible.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Test tour board.
Make a simple test,¬†take a FTDI cable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;ftdi5v.jpg&quot; alt=&quot;ftdi&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Put the black cable (the one that have an arrow on it) on the GND.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;ftdi-galileo.jpg&quot; alt=&quot;Galileo Connector&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The board come with a jumper to select the logic level of the FTDI (5V or 3.3V).
After that, we ¬†can access the terminal of the inboard Linux. ¬†Plug the FTDI in your computer.&lt;&#x2F;p&gt;
&lt;pre&gt;$ dmesg&lt;&#x2F;pre&gt;
&lt;p&gt;With this command you will see the name of the USB adapter.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;dmesg-ftdi.png&quot; alt=&quot;ftdi dmesg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As we can see, the name of the USB adapter is ttyUSB0.
Now we can connect with the board and read the feedback of the boot.&lt;&#x2F;p&gt;
&lt;pre&gt;$ screen &#x2F;dev&#x2F;ttyUSB0 115200&lt;&#x2F;pre&gt;
&lt;p&gt;Turn on your board and wait, you will see the boot options and the log.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade your firmware.
Download the program to update the firmware of the board.
Website :&lt;a href=&quot;https:&#x2F;&#x2F;downloadcenter.intel.com&#x2F;download&#x2F;24748&#x2F;Intel-Galileo-Firmware-and-Drivers-1-0-4&quot;&gt;Intel Links.&lt;&#x2F;a&gt;
Windows software : &lt;a href=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;IntelGalileoFirmwareUpdater-1.0.4-Windows.zip&quot;&gt;IntelGalileoFirmwareUpdater-1.0.4-Windows&lt;&#x2F;a&gt;
OS Independent : &lt;a href=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;IntelGalileoFirmwareUpdater-1.0.4.jar&quot;&gt;IntelGalileoFirmwareUpdater-1.0.4&lt;&#x2F;a&gt;
The Windows 10 and the Linux OS already have the drivers for Galileo and Edison.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Download the last image to your SD card.
The last image can be downloaded with &lt;a href=&quot;https:&#x2F;&#x2F;software.intel.com&#x2F;sites&#x2F;landingpage&#x2F;iotdk&#x2F;board-boot-image.html&quot;&gt;this link.
&lt;&#x2F;a&gt;Format the SD card with fat32 (you can do this with gparted).
Unzip the file and put the image inside of the SD card, you can do this with the dd command.&lt;&#x2F;p&gt;
&lt;pre&gt;$ dd if=image of=&#x2F;dev&#x2F;sdx bs=8&lt;&#x2F;pre&gt;
&lt;p&gt;If the board did not boot the SD card try another card.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Update the repository.
Use the command¬†&lt;code&gt;$ opkg update &lt;&#x2F;code&gt; to update your the repository, if the command did not return no nothing, you will need to set the repository by hand, like done &lt;a href=&quot;&#x2F;starting_with_intel_edison_platform&quot;&gt;in the this pots&lt;&#x2F;a&gt;. But use the new repository !
You can see the new one &lt;a href=&quot;http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
    </channel>
</rss>