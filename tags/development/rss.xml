<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Patrick Jos√© Pereira - development</title>
        <link>https://patrickelectric.work</link>
        <description>I am an Electronics Engineer that works with robotic systems, OSS and OSH.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://patrickelectric.work/tags/development/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 31 Aug 2020 13:55:39 +0000</lastBuildDate>
        <item>
            <title>How to rock: Doing the right thing</title>
            <pubDate>Mon, 31 Aug 2020 13:55:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/how-to-rock-contribution-tips/</link>
            <guid>https://patrickelectric.work/blog/2020/how-to-rock-contribution-tips/</guid>
            <description>&lt;p&gt;After a couple of years collaborating with open source&#x2F;free software projects, I started to help newcomers to contribute and push the development practices further. This post will try to itemize the most important items that can used for software collaboration.
Before starting, be sure to follow my &lt;a href=&quot;&#x2F;tags&#x2F;how-to-rock&quot;&gt;previous posts&lt;&#x2F;a&gt;, this post complements what already exists.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Now, I&#x27;m going to throw some good practices of code development and contribution, and during this post I&#x27;ll explain why such practices can be archived without much effort:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid creating multiple PRs for the same work&lt;&#x2F;strong&gt;, update the ones that are still open.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You created a Pull Request called &amp;quot;Feature: add button&amp;quot;, some modifications will be necessary after the review process, and for that you&#x27;ll need to update the same branch over creating new ones. That&#x27;s necessary to help the project maintainers to see previous comments and your development history, avoid repository noise and unnecessary PRs in the project history. Creating multiple PRs will only make the maintainers confuse and unable to track old comments, suggestions and your code changes between PRs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-contained commits&lt;&#x2F;strong&gt;, avoid doing multiple things in the same commit.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You have created a commit to fix the serial communication class, and inside the same commit you are doing 3 different things, removing trailing spaces, fixing a pointer validation check and a typo in the documentation of a totally different class. This can appear to be silly and bureaucratic, but there are good reasons to break this simple commit and at least 3 different commits, one for the pointer check, a second one for the typo and a third one for the trailing space.
&lt;ul&gt;
&lt;li&gt;It makes your work more clear when the maintainer does the review per commit&lt;&#x2F;li&gt;
&lt;li&gt;Makes it easier for developers to cherry-pick your work avoiding conflicts&lt;&#x2F;li&gt;
&lt;li&gt;Makes it easier to fix conflicts when doing rebases over the master branch&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Helps developers to read the project history&lt;&#x2F;li&gt;
&lt;li&gt;Developers usually track lines history to understand the changes behind a functionality, it&#x27;s common to search with &lt;code&gt;git grep&lt;&#x2F;code&gt; history from commits or lines changes in specific commits to understand the code, function, class or a small feature.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-sustained PRs&lt;&#x2F;strong&gt;, avoid doing multiple things in the same PR, like different features. They may appear simple with small pieces of code&#x2F;functionality but they can escalate quickly after a review process, and if both features are somehow related or dependently, it&#x27;s recommended to break it in multiple PRs with code to maintain compatibility with current code base. A huge PR can drag developer and maintainer in a rabbit hole, making the PR to be not merged, keeping it simple is the best way to merge it and get the sweet serotonin boost.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You have applied a PR for software notifications, and somehow you also added a URL fetch functionality to grab new software versions, etc. After the first review, the maintainer asks to create a more abstracted way to fetch api and to deal with network requirements, this will start to convolute the PR, moving the initial idea of the notification feature to an entire network REST API architecture. With that, it&#x27;s better to break the PR in two, one that only provides the notification software and interface feature and a second PR that is used for the REST API.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your own review&lt;&#x2F;strong&gt;, the final and probably most important tip of all. Doing you own review will train your mind and eyes to detect poor code standards or bad practices, it&#x27;ll also make your PR be merged easily and faster, since you&#x27;ll be able to catch problems before the reviewer feedback. Some reviewers may think that reviewing your own PR is a must, since we are talking about open source projects and free software, you should understand that the people that are reviewing your code are not obligated to do so, the majority are collaborating and donating their own time to help the development and maintenance of such projects, doing your own review is also sign of empathy about the project and maintainer time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>How to rock: Flowing with git</title>
            <pubDate>Mon, 24 Aug 2020 13:55:39 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/how-to-rock-flowing-with-git/</link>
            <guid>https://patrickelectric.work/blog/2020/how-to-rock-flowing-with-git/</guid>
            <description>&lt;p&gt;Git is awesome, git rocks, git is like a super advanced car, but if you don&#x27;t read the manual, you&#x27;ll never know the features!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;useful-tips&quot;&gt;Useful tips&lt;&#x2F;h1&gt;
&lt;p&gt;The idea behind this section is to point some important things that I learned in the pass years while reading some great books, such as: &lt;a href=&quot;https:&#x2F;&#x2F;isbnsearch.org&#x2F;isbn&#x2F;9781783553754&quot;&gt;Mastering Git&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&quot;&gt;Pro Git(it&#x27;s free!)&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tig&quot;&gt;Tig&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What&#x27;s the use of having access to everything, if you can&#x27;t visualize it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Git is really great, but what matters a great tool if the user interface is not as polished as we desire to be. &lt;strong&gt;&lt;code&gt;Tig&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; is one of the greatest tools to be used with Git, is the UI that mostly programmers are missing to visualize and understand what is going on in the git repository. If you didn&#x27;t know about it, install and use it now.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;tig-all.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    tig --all
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;Tig&lt;&#x2F;code&gt; also allow a bunch of useful arguments, such as &lt;code&gt;log&lt;&#x2F;code&gt;, &lt;code&gt;show&lt;&#x2F;code&gt;, &lt;code&gt;status&lt;&#x2F;code&gt;, &lt;code&gt;reflog&lt;&#x2F;code&gt;, &lt;code&gt;blame&lt;&#x2F;code&gt;, &lt;code&gt;grep&lt;&#x2F;code&gt;, &lt;code&gt;refs&lt;&#x2F;code&gt;, &lt;code&gt;stash&lt;&#x2F;code&gt; and others, we are going to talk about some of these later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-commit-fixup&quot;&gt;Git commit --fixup&lt;&#x2F;h2&gt;
&lt;p&gt;Oh my, you need to fix an old commit on your PR ? That&#x27;s a great use of &lt;code&gt;fixup&lt;&#x2F;code&gt;.
You can create a commit that fixes an old commit with &lt;code&gt;git commit -a --fixup 00112233&lt;&#x2F;code&gt;, but who has time to write hashs or copying&#x2F;pasting it ?&lt;&#x2F;p&gt;
&lt;p&gt;For that, you can create a helpful git alias such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# git fix-old number
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Will apply a fixup in the n-old commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fix-old&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!f() { git commit --fixup=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; rev-parse HEAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;))); }; f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that, you can use &lt;code&gt;fit fix-old 3&lt;&#x2F;code&gt; to fix the &lt;code&gt;HEAD~3&lt;&#x2F;code&gt; commit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-rebase-i-interactive-rebase&quot;&gt;Git rebase -i (Interactive rebase)&lt;&#x2F;h2&gt;
&lt;p&gt;Interactive rebase is a powerful command, and much more powerful and human friend with interactive mode.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;rebase-i.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    git rebase -i --autosquash origin&amp;#x2F;master
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Oh well, you can see the &lt;code&gt;autosquash&lt;&#x2F;code&gt; option there, this is something that I do to apply fixups automatically on the correct commits, neat right ?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-reflog&quot;&gt;Git reflog&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;&#x2F;code&gt; is one of the most important commands, it provides access to everything that is tracked or was tracked by git, all commands and actions that was done in the entire history of the project can be accessed, it&#x27;s possible to checkout and see the history of development tree in any moment, before or during a rebase, the history of a branch before a terrible idea in the code, a point between a merge conflict, everything is possible to recover or to start from a previous point, if you have done any git command with tracked files, you&#x27;ll not loose it.&lt;&#x2F;p&gt;
&lt;p&gt;For an awesome experience, I recommend to use &lt;code&gt;tig&lt;&#x2F;code&gt; with &lt;code&gt;reflog&lt;&#x2F;code&gt; (&lt;code&gt;tig reflog&lt;&#x2F;code&gt;) to see a user-friendly history of &lt;code&gt;reflog&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;tig-reflog.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    checkout, rebase, reset, cherry-pick, the history is all there and you can checkout in any hash!
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;&lt;h2 id=&quot;git-add-checkout-stash-patch-p&quot;&gt;Git add&#x2F;checkout&#x2F;stash --patch&#x2F;-p&lt;&#x2F;h2&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;add-p.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    git add -p, add only what you need
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The &lt;code&gt;--patch&lt;&#x2F;code&gt; argument is a great feature, you can use it with &lt;code&gt;add&lt;&#x2F;code&gt;, &lt;code&gt;checkout&lt;&#x2F;code&gt;, &lt;code&gt;stash&lt;&#x2F;code&gt; and others, it allows your to select what you need in your commit,
it helps to avoid adding unnecessary stuff in your commit and only adding what is needed for an atomic patch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-stash&quot;&gt;Git stash&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes we want to remove everything that we are working on, a bunch of uncommitted or unstaged code around your project, but at the same time, we are a big afraid to remove and loose all this code. The answer for your problems is git stash, git will get everything that is not staged.&lt;&#x2F;p&gt;
&lt;p&gt;To visualize what was stashed, you can run &lt;code&gt;git stash show stash@{0} --all&lt;&#x2F;code&gt; where &lt;code&gt;0&lt;&#x2F;code&gt; can be the nth stash. You can also visualize it with &lt;code&gt;tig stash&lt;&#x2F;code&gt;;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to apply any stashed code, you can do it with &lt;code&gt;git stash apply stash@{0}&lt;&#x2F;code&gt;, again, where &lt;code&gt;0&lt;&#x2F;code&gt; can be the nth stash.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-cherry-pick&quot;&gt;Git cherry-pick&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to test some commits or apply in different branches for any reason, &lt;code&gt;git cherry-pick&lt;&#x2F;code&gt; is here for you, with it you can just copy a commit or a range of commits to apply over a specific branch.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;knowing-the-basic-how-the-flow-works&quot;&gt;Knowing the basic (How the flow works)&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This part was the first section of this post, but since I went really deep about how git works, it&#x27;s now in the end as a bonus section.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An alternative title could be: &#x27;Introduction to Git flow&#x27;, I hope that you understand what kind of introduction I&#x27;m talking about :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, if you thought about &#x27;the flow&#x27; as related to branches, I can&#x27;t blame you. First we need to go to the basics, before branches, before anything else.&lt;&#x2F;p&gt;
&lt;p&gt;First we need to create the foundation (&lt;code&gt;git init&lt;&#x2F;code&gt;) for our building (our project&#x2F;source code).&lt;&#x2F;p&gt;
&lt;p&gt;What init will do ? You may ask, well, it creates a folder with a bunch of cool things inside.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;tmp&#x2F;echo &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span&gt;): tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;.git &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Folder where git will store all necessary information to work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;branches &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Deprecated, only exist for compatibility
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Folder for specific configuration files (~&#x2F;.gitconfig friends)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Used for GitWeb
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;HEAD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# A file that has the reference of the current branch (ref&#x2F;heads&#x2F;master)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;hooks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Git hook files (comes with bunch of free examples by default), soon we&amp;#39;ll talk more about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ applypatch-msg.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ commit-msg.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ fsmonitor-watchman.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ post-update.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-applypatch.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-commit.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-merge-commit.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ prepare-commit-msg.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-push.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-rebase.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ pre-receive.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ update.sample
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store information related to folders, files and submodules (it&amp;#39;ll be populated after you add the first file)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store information related to a gitignore, gitattributes and etc, we&amp;#39;re not going to talk about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ exclude
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;objects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# All our references will be here, soon we are going to see how and what
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Bunch of internal things that are stored, not going to talk about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store compressed files, not going to talk about it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;refs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# All friend references are here, branches, remotes, tags, stags
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;heads &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Local branches
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;remotes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Remote repositories (it&amp;#39;ll be populated after you add the first remote)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ   &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ origin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Remote name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ       &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ master &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Has the hash of the remote master branch
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;tags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Store all tags of your project
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have added some stuff that are not populated from a fresh &lt;code&gt;git init&lt;&#x2F;code&gt; for educational reasons, for more information, check &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;gitrepository-layout&quot;&gt;gitrepository-layout&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, looks complicated right ? It may, but it&#x27;s not. If you are not aware, &lt;code&gt;git&lt;&#x2F;code&gt; description is: &amp;quot;the stupid content tracker&amp;quot;,
I believe that may be a weird thing to describe our magical tool with such words, I prefer to say: &amp;quot;the &lt;em&gt;simple&lt;&#x2F;em&gt; content tracker&amp;quot;, and will explain why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-and-add-a-file&quot;&gt;Create and add a file&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s populate our repository and create a simple commit:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a file: &lt;code&gt;touch README.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Let put something inside to make it more funny.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat README.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Hello!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Now our working directory is not empty, we have something there! But sadly, not tracked by git, we can change that.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add this files to be tracked by git, or indexed: &lt;code&gt;git add README.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Wait a minute, we did something with git right ? Let&#x27;s see what changed:&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.git
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# It&amp;#39;s populated now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;objects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Wow we have some crazy file and folder inside
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ddd6d257e01349d514541981aeecea6b2e741d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;refs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;heads
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;tags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;index&quot;&gt;Index&lt;&#x2F;h2&gt;
&lt;p&gt;This file is just a binary glob with a bunch of basic information about the files and paths that git is tracking.&lt;&#x2F;p&gt;
&lt;p&gt;What is important for us now, index will have the following content:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A header for git internal usage.&lt;&#x2F;li&gt;
&lt;li&gt;The number of indexes (hashes) available.&lt;&#x2F;li&gt;
&lt;li&gt;A list of hashes that contain:
&lt;ol&gt;
&lt;li&gt;The filename&lt;&#x2F;li&gt;
&lt;li&gt;The path&lt;&#x2F;li&gt;
&lt;li&gt;The time that the file was changed&lt;&#x2F;li&gt;
&lt;li&gt;Type of the file (can be a folder, or a virtual file and etc)&lt;&#x2F;li&gt;
&lt;li&gt;The permission of such file (&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;File_permissions_and_attributes_&quot;&gt;linux permission&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;File size&lt;&#x2F;li&gt;
&lt;li&gt;And finally, &lt;strong&gt;our hash (sha1)&lt;&#x2F;strong&gt; [10ddd6d257e01349d514541981aeecea6b2e741d]&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Wait, don&#x27;t you believe me ? Check it here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; index | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000000:&lt;&#x2F;span&gt;&lt;span&gt; 0x44 0x49 0x52 0x43 0x00 0x00 0x00 0x02 0x00 0x00 DIRC......
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00000a:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x01 0x5f 0x41 0x44 0x35 0x1b 0xd6 0x67 0x47 .._AD5..gG
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000014:&lt;&#x2F;span&gt;&lt;span&gt; 0x5f 0x41 0x44 0x35 0x1b 0xd6 0x67 0x47 0x00 0x00 _AD5..gG..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00001e:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x2f 0x00 0x09 0xb1 0x41 0x00 0x00 0x81 0xa4 .&#x2F;...A....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000028:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x00 0x03 0xe8 0x00 0x00 0x03 0xe8 0x00 0x00 ..........
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000032:&lt;&#x2F;span&gt;&lt;span&gt; 0x00 0x07 0x10 0xdd 0xd6 0xd2 0x57 0xe0 0x13 0x49 ......W..I
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00003c:&lt;&#x2F;span&gt;&lt;span&gt; 0xd5 0x14 0x54 0x19 0x81 0xae 0xec 0xea 0x6b 0x2e ..T.....k.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000046:&lt;&#x2F;span&gt;&lt;span&gt; 0x74 0x1d 0x00 0x09 0x52 0x45 0x41 0x44 0x4d 0x45 t...README
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000050:&lt;&#x2F;span&gt;&lt;span&gt; 0x2e 0x6d 0x64 0x00 0x87 0x87 0x7d 0xde 0xf5 0x59 .md...}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..Y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00005a:&lt;&#x2F;span&gt;&lt;span&gt; 0x22 0x0a 0x7d 0x9c 0x48 0xce 0xde 0x29 0x94 0x60 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.}.H..).`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x000064:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; 0x17 0x2c 0xf3 0xcc                               .,..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; 104
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check &lt;code&gt;0x000032&lt;&#x2F;code&gt; until &lt;code&gt;0x000046&lt;&#x2F;code&gt;, you&#x27;ll see our sha1 value &lt;strong&gt;10ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;strong&gt; (&lt;em&gt;0x10 0xdd 0xd6 0xd2&lt;&#x2F;em&gt;) and after that our file &lt;strong&gt;README.md&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to learn how it works and what is inside, check &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;index-format&quot;&gt;here&lt;&#x2F;a&gt; for more information,
and &lt;a href=&quot;https:&#x2F;&#x2F;mincong.io&#x2F;2018&#x2F;04&#x2F;28&#x2F;git-index&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; for an awesome adventure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;objects&quot;&gt;Objects&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, now that we know that &lt;em&gt;index&lt;&#x2F;em&gt; is pointing to this hash, let&#x27;s check the objects folder.
As I said before, &lt;strong&gt;objects&lt;&#x2F;strong&gt; folder will store all the references that exist, it should be our yellow pages. First, let&#x27;s understand how to read it.
There is a folder called &lt;strong&gt;10&lt;&#x2F;strong&gt;, and after that a file that has the name of &lt;strong&gt;ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;strong&gt;, if you put both together you are going to end up with our hash that we found in the &lt;em&gt;index&lt;&#x2F;em&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Just for our curiosity, this hash is calculated based in the following format &lt;code&gt;{TYPE} {SIZE}{NULL_CHAR}{CONTENT}&lt;&#x2F;code&gt;, the type will tell git if the hash points to a tree or a blob, the tree can have multiple blobs (like a folder), and a blob is a file. In our case, the string that defines this hash is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span&gt;hashlib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blob 7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hexdigest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more information, &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Internals-Git-Objects&quot;&gt;check Git Internals Git Objects&lt;&#x2F;a&gt;, it&#x27;s a great friday night reading.&lt;&#x2F;p&gt;
&lt;p&gt;Ok! Now we are ready to commit!&lt;&#x2F;p&gt;
&lt;p&gt;Hey, wait, what is inside of this files object files ?
Oh my, ok, for now, this is where the git magic happens, it&#x27;s a binary object that contains information about the diff, don&#x27;t bother about it, but if you are really willing to know, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gitster&#x2F;git&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;technical&#x2F;pack-format.txt&quot;&gt;check it here&lt;&#x2F;a&gt; (Please open an issue if you know a better and friendly reference).&lt;&#x2F;p&gt;
&lt;p&gt;Back to the commit!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;commit&quot;&gt;Commit&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git commit -sm &amp;quot;First commit&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.git
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# It&amp;#39;s populated now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;objects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Wow we have some crazy file and folder inside
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;08
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ f87015745258743015340c5466fe69c94f7587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ddd6d257e01349d514541981aeecea6b2e741d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ 1d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îÇ¬†¬† ‚îî‚îÄ‚îÄ 12099363e995c9fc3e1d2cc68b74b8e10c361a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îÇ¬†¬† &lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ pack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;refs
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îú‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;heads
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;‚îî‚îÄ‚îÄ &lt;&#x2F;span&gt;&lt;span&gt;tags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, we have finished our first commit and now we have two more objects, let&#x27;s check what is inside of each one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git cat-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 1d12099363e995c9fc3e1d2cc68b74b8e10c361a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt; 08f87015745258743015340c5466fe69c94f7587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span&gt; Patrick Jos√© Pereira &amp;lt;myemail&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1598117804&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;committer&lt;&#x2F;span&gt;&lt;span&gt; Patrick Jos√© Pereira &amp;lt;myemail&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1598117804&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;First&lt;&#x2F;span&gt;&lt;span&gt; commit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git cat-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 08f87015745258743015340c5466fe69c94f7587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100644&lt;&#x2F;span&gt;&lt;span&gt; blob 10ddd6d257e01349d514541981aeecea6b2e741d    README.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git cat-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 10ddd6d257e01349d514541981aeecea6b2e741d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we have a commit object: &lt;strong&gt;1d12099363e995c9fc3e1d2cc68b74b8e10c361a&lt;&#x2F;strong&gt;, that points to the tree &lt;strong&gt;08f87015745258743015340c5466fe69c94f7587&lt;&#x2F;strong&gt;,
this tree has a single file on it, our old friendly &lt;strong&gt;README.md&lt;&#x2F;strong&gt;, and this same tree says that this blob has the hash &lt;strong&gt;10ddd6d257e01349d514541981aeecea6b2e741d&lt;&#x2F;strong&gt;, and this hash contains the content of &lt;strong&gt;README.md&lt;&#x2F;strong&gt;. Simple Right ?!&lt;&#x2F;p&gt;
&lt;p&gt;As I said, a tree can contain multiple blobs, or more trees, like in the following example:&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;git&amp;#x2F;data-model-2.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    &amp;quot;Git Internals Git Objects&amp;quot; from Git SCM is licensed under CC BY 3.0
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;And after some more commits, we end up with multiple commits, that each commit has a tree, and each tree points to more trees or more blobs!&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;git&amp;#x2F;data-model-3.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    &amp;quot;Git Internals Git Objects&amp;quot; from Git SCM is licensed under CC BY 3.0
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;&lt;h2 id=&quot;wrap-up-git-commit-logic-and-git-internals&quot;&gt;Wrap up git commit logic and git internals&lt;&#x2F;h2&gt;
&lt;p&gt;Git, as a &lt;em&gt;simple content tracker&lt;&#x2F;em&gt;, uses a simple logic to manage all the files, as you saw, git works with the filesystem as a dictionary, where the filenames define the key and the content of such files are the content of this dictionary key, you can think about it as a content-addressable filesystem.&lt;&#x2F;p&gt;
&lt;p&gt;Since we have finished talking about git manages our commits, files and everything else, let us finish this deep introductory part with how the commit and the object creation works.&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;how_to_rock&amp;#x2F;git&amp;#x2F;reset-workflow.png&quot; class=&quot;center&quot;&gt;
  &lt;figcaption&gt;
    &amp;quot;Reset workflow&amp;quot; from Git SCM is licensed under CC BY 3.0
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The previous is a good simple example of how a commit works, first we have a untracked file in our working directory, we stage this file (&lt;code&gt;git add&lt;&#x2F;code&gt;) and after that we commit this file (&lt;code&gt;git commit&lt;&#x2F;code&gt;) the commit does update the &lt;em&gt;HEAD&lt;&#x2F;em&gt; (the hash where we are right now). And doing a checkout to a different hash (or &lt;em&gt;HEAD&lt;&#x2F;em&gt;) will result in a change of the working directory to match what was commited.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cool-extensions-to-have&quot;&gt;Cool extensions to have:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dandavison&#x2F;delta&quot;&gt;delta&lt;&#x2F;a&gt;: A syntax-highlighting pager for git, diff, and grep output&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tummychow&#x2F;git-absorb&quot;&gt;git-absorb&lt;&#x2F;a&gt;: &lt;code&gt;git commit --fixup&lt;&#x2F;code&gt;, but automatic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;&#x2F;h1&gt;
&lt;p&gt;Check the official Git SCM &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;website&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;git&#x2F;git-scm.com&quot;&gt;repository&lt;&#x2F;a&gt; for images and guidance.&#x27;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>How to rock: First tips</title>
            <pubDate>Sat, 08 Aug 2020 08:28:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2020/how-to-rock-first-tips/</link>
            <guid>https://patrickelectric.work/blog/2020/how-to-rock-first-tips/</guid>
            <description>&lt;p&gt;After working for some time collaborating with open source&#x2F;free software projects, I started to help newcomers to contribute and push the development further with good practices.&lt;&#x2F;p&gt;
&lt;p&gt;This post will try to itemize some important tips that can be used for software collaboration and personal projects, hopefully it&#x27;ll help you to have a solid ground of good practices and advices for your contributions in a project. It contains information abut good code practices, a simple guide of helpful API design, code organization, comments, naming variables, development flow and self-criticism. Please enjoy, and any feedback (including critics) is much appreciated!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;code-practices&quot;&gt;Code practices&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encapsulate magic variables&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; First version
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_communication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;232&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: What is the meaning of 0 ? What is 1 ? Why 232 ?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Second version
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum class &lt;&#x2F;span&gt;&lt;span&gt;Messages {
&lt;&#x2F;span&gt;&lt;span&gt;      ...
&lt;&#x2F;span&gt;&lt;span&gt;      RequestStatus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;232&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t vid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t cid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_communication&lt;&#x2F;span&gt;&lt;span&gt;(vid, cid, Messages::RequestStatus);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: What is vid ? What is cid ?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Final version
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t vehicle_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t component_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_communication&lt;&#x2F;span&gt;&lt;span&gt;(vehicle_id, component_id, Messages::RequestStatus);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the final version makes everything more readable, we know that we are starting the communication with a vehicle that has an id of 0 and the vehicle probably contains a component with id 1, and while calling this function we are also requesting the status. Much better than 0, 1 and 232 right ?
Doing this will help the reviewers and future developers to understand what is the meaning of such numbers.
It&#x27;s also necessary to avoid variables that contains only single letters or really short abbreviations, is much harder to understand this: $$C^2 = A^2 + B^2$$
over this: $$hypotenuse^2 = catheti_1^2 + catheti_2^2$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid multiple arguments&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; First version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; vehicle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vehicle&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    VehicleType::Car,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    Fuel::Electric,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;613
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: What is the meaning of all this values ?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;           How can we make it better ?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Second version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; vehicle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vehicle&lt;&#x2F;span&gt;&lt;span&gt;(VehicleType::Car)
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setNumberOfTires&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTirePressure&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFuel&lt;&#x2F;span&gt;&lt;span&gt;(Fuel::Electric);
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setWeightInTons&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;vehicle-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAutonomyInKm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;613&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; It&amp;#39;s also possible to use aggregate initialization in C++20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and user-defined literals from C++11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; vehicle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vehicle&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= VehicleType::Car,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numberOfTires &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tirePressure &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_psi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_psi&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fuel &lt;&#x2F;span&gt;&lt;span&gt;= Fuel::Electric,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_tn&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;autonomy &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;613&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;_km&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both second and C++20&#x2F;C++11 alternatives are valid for a better readability of the code, to choose between both alternatives will depend of how are you going to design your API, probably if you are more familiar with the Qt API, the second version appears to be the most common, the C++20&#x2F;C++11 alternative appears to be a bit more verbose but can be useful to avoid multiple function calls and helpful when dealing with a simpler code base.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encapsulate code when necessary&lt;&#x2F;strong&gt;, try to break functions in a more readable and explanatory way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Original version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start_serial_communication&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if we are open to talk
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!_port || _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xb0001&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serial port is not open!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send a 10ms serial break signal
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send intercalated binary for detection
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send start AT command
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AT+start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reviewer: Try to make it more readable encapsulating
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;            some functionalities
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Second version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_port_open&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!_port || _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xb0001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;force_baudrate_detection&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send a 10ms serial break signal
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_break_enabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send intercalated binary for detection
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_message&lt;&#x2F;span&gt;&lt;span&gt;(Message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message_type&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    _port-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messageFromType&lt;&#x2F;span&gt;&lt;span&gt;(message_type));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;Serial::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start_serial_communication&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_port_open&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serial port is not open!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;force_baudrate_detection&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_message&lt;&#x2F;span&gt;&lt;span&gt;(Message::Start)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the reason behind each block of code is clear now, and with that, the comments are also not necessary anymore, the code is friendly and readable enough that&#x27;s possible to understand it without any comments, the function name does the job for free.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid comments&lt;&#x2F;strong&gt;, that&#x27;s a clickbait, comments are really necessary, but they may be unnecessary when you are doing something that&#x27;s really straightforward, and sometimes when something isn&#x27;t, it&#x27;s better to encapsulate it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;    ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Original version
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;blink_routine&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use the LED builtin
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; led_builtin = LED_BUILTIN;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Configure ping to output
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPinAsOutput&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Loop forever
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Turn the LED on
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOn&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Wait for a second
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Turn the LED off
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOff&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Wait for a second
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before checking the final version, let me talk more about it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For each line of code you&#x27;ll have a comment (like a parrot that repeat what we say), and the worst thing about these comments is that the content is exactly what you can read from the code! You can think that this kind of comment is dead code, something that has the same meaning as the code, but it does not run, resulting in a duplicated amount of lines to maintain. If you forget to update each comment for each line of code, you&#x27;ll have a comment that does not match with the code, and this will be pretty confuse for someone that&#x27;s reading it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;One of the most important skills about writing comments, is to know when not to write it!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A comment should bring a value to the code, if you can remove the comment and the code can be understandable by a newcomer, the comment is not important.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Final version
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;blink_routine&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; led_builtin = LED_BUILTIN;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPinAsOutput&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOn&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;turnPinOff&lt;&#x2F;span&gt;&lt;span&gt;(led_builtin);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait_seconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a good video about this subject by &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=NLebZ3XT92E&quot;&gt;Walter E. Brown in cppcon 2017, &amp;quot;Whitespace ‚â§ Comments ÔºúÔºú Code&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And to finish, you should not avoid comments, you should understand when comments are necessary, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; From ArduPilot - GPIO_RPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_gpio_mode_alt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alternative&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; **Moved content from cpp for this example**
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t pins_per_register = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Calculates the position of the 3 bit mask in the 32 bits register
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t tree_bits_position_in_register = (pin%pins_per_register)*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;** Creates a mask to enable the alternative function based in the following logic:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * | Alternative Function | 3 bits value |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |:--------------------:|:------------:|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 0      |     0b100    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 1      |     0b101    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 2      |     0b110    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 3      |     0b111    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 4      |     0b011    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * |      Function 5      |     0b010    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint8_t alternative_value =
&lt;&#x2F;span&gt;&lt;span&gt;        (alternative &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span&gt;? (alternative + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;) : (alternative == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0b00&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;000&amp;#39;ALT&amp;#39;000&amp;#39;000&amp;#39;000 enables alternative for the 4th pin
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint32_t mask_with_alt = static_cast&amp;lt;uint32_t&amp;gt;(alternative_value) &amp;lt;&amp;lt; tree_bits_position_in_register;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;uint32_t mask = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0b111 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; tree_bits_position_in_register;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Clear all bits in our position and apply our mask with alt values
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t register_value = _gpio[pin &#x2F; pins_per_register];
&lt;&#x2F;span&gt;&lt;span&gt;    register_value &amp;amp;= ~mask;
&lt;&#x2F;span&gt;&lt;span&gt;    _gpio[pin &#x2F; pins_per_register] = register_value | mask_with_alt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Mostly of the lines in this code can be impossible to understand without access or reading the datasheet directly,
the comments are here to understand what is going on and why, otherwise anyone that&#x27;ll touch this code will need to do a reverse engineer to understand it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;development-flow&quot;&gt;Development flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid creating multiple Pull Requests (PRs)&lt;&#x2F;strong&gt;, update the ones that are still open.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You created a Pull Request called &amp;quot;Add button feature&amp;quot;, some modifications will be necessary after the review process, and for that you&#x27;ll need to update the same branch over creating new ones. That&#x27;s necessary to help the project maintainers to see previous comments and the development history. Creating multiple PRs will only make the maintainers confuse and unable to track old comments, suggestions and your code changes between PRs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-contained commits&lt;&#x2F;strong&gt;, avoid doing multiple tasks in the same commit.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;E.g: You created a commit to fix the serial communication class, and inside the same commit you are doing 3 different tasks, removing trailing spaces, fixing a pointer validation check and a typo in the documentation of a different class. This appear to be silly and bureaucratic, but there are good reasons to break this simple commit and at least 3 different commits, one for the pointer check, a second one for the typo and a third one for the trailing space.&lt;&#x2F;p&gt;
&lt;p&gt;Developers usually track lines history to understand the changes behind a functionality, it&#x27;s common to search with grep history from commits or line changes in specific commits to understand the history of a library, function, class, or a small feature, if the commits start to be polluted with unnecessary changes, this development practice will be almost impossible to be done, since a bunch of unrelated lines will me changed between commits and this technic will be unable to help the dear developer. &lt;code&gt;git blame&lt;&#x2F;code&gt; will also be of little help.&lt;&#x2F;p&gt;
&lt;p&gt;The example was also really simple, but you can imagine what happens if you change different parts of the code, for unrelated things, and a bug appears, technics such as &lt;code&gt;git bisect&lt;&#x2F;code&gt; will still work, but the result will be much harder to understand and to find which line is the one that created such bug.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create atomic and self-sustained PRs&lt;&#x2F;strong&gt;, avoid doing multiple things in the same PR, like different features. They may appear simple with small pieces of code&#x2F;functionality but they can escalate quickly after a review process, and if both features are somehow related or dependently, it&#x27;s recommended to break it in multiple PRs with code to maintain compatibility with current code base.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;E.g: You have applied a PR for software notifications, and somehow you also added a URL fetch functionality to grab new software versions from the server. After the first review, the maintainer asks to create a more abstracted way to fetch data from a REST API and to deal with network requirements, this will start to convolute the PR, moving the initial idea of the notification feature to an entire network REST API architecture. With that, it&#x27;s better to break the PR in two, one that only provides the notification and a second PR that is used for the REST API related code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your own review&lt;&#x2F;strong&gt;, the final and probably most important tip of all, doing that will train your mind and eyes to detect poor code standards or bad practices, it&#x27;ll also make your PR be merged easily and faster, since you&#x27;ll be able to catch problems before the reviewer feedback. Some reviewers may think that reviewing your own PR is a must, since we are talking about open source projects and free software, you should understand that the people that are reviewing your code are not obligated to do so, the majority are collaborating and donating their own time to help the development and maintenance of such projects, doing your own review is a sign of empathy about the project and maintainer time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;final-comment&quot;&gt;Final comment&lt;&#x2F;h1&gt;
&lt;p&gt;This is the first post of a series that I&#x27;m planning to do. Hope that some of these points may help you in your journey.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MBRoCdtZOYg&quot;&gt;CppCon 2019: Kate Gregory ‚ÄúNaming is Hard: Let&#x27;s Do Better‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=n0Ak6xtVXno&quot;&gt;CppCon 2018: Kate Gregory ‚ÄúSimplicity: Not Just For Beginners‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=kYVxGyido9g&quot;&gt;CppCon 2018: Kate Gregory ‚ÄúWhat Do We Mean When We Say Nothing At All?‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YWiAUUblD34&quot;&gt;CppCon 2017: Lars Knoll ‚ÄúQt as a C++ Framework: History, Present State and Future‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=XkDEzfpdcSg&quot;&gt;CppCon 2017: Kate Gregory ‚Äú10 Core Guidelines You Need to Start Using Now‚Äù&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.qt.io&#x2F;API_Design_Principles&quot;&gt;API Design Principles - TQtC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;archives&#x2F;qq&#x2F;qq13-apis.html&quot;&gt;Designing Qt-Style C++ APIs - Matthias Ettrich&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.mpi-inf.mpg.de&#x2F;~jblanche&#x2F;api-design.pdf&quot;&gt;The Little Manual of API Design - Jasmin Blanchette&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
    </channel>
</rss>