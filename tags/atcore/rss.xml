<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Patrick Jos√© Pereira - atcore</title>
        <link>https://patrickelectric.work</link>
        <description>I am an Electronics Engineer that works with robotic systems, OSS and OSH.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://patrickelectric.work/tags/atcore/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sun, 02 Jul 2017 00:00:00 +0000</lastBuildDate>
        <item>
            <title>QT3D, Lines and AtCore</title>
            <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/qt3d-lines-atcore/</link>
            <guid>https://patrickelectric.work/blog/2017/qt3d-lines-atcore/</guid>
            <description>&lt;p&gt;After some time working with Qt3D, now Atelier project is one step closer to have a 3D viewer from the GCode and a realtime draw of printer work.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;atcore.gif&quot; alt=&quot;3D draw with lines&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To know how Qt3D works, you can take a look in this &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qt3d-overview.html&quot;&gt;overview&lt;&#x2F;a&gt;. Where, working with 3D lines was a bit problematic, but I hope to help someone with this job.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h1&gt;
&lt;p&gt;To render, we need our mesh and the material. This simple cube have something more than 1300 lines, and if you are thinking about it, you can can handle big models like this &lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;thing:51415&quot;&gt;Dragon Head&lt;&#x2F;a&gt; with around 706000 lines in 60fps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;dragon.png&quot; alt=&quot;dragon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mesh&quot;&gt;Mesh&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s done with a C++ code, where a 4D vector is used to perform the buffer population, the 4D is because a 3D printer have 4 dimensions in a actuation space, (X, Y, Z and E) where E is the extruder that move the filament to perform the extrusion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;LineMeshGeometry::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMeshGeometry&lt;&#x2F;span&gt;&lt;span&gt;(QList&amp;lt;QVector4D&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertices&lt;&#x2F;span&gt;&lt;span&gt;, Qt3DCore::QNode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;) :
&lt;&#x2F;span&gt;&lt;span&gt;    Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;QGeometry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_positionAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_vertexBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QBuffer&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QBuffer::VertexBuffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    QByteArray vertexBufferData;
&lt;&#x2F;span&gt;&lt;span&gt;    vertexBufferData.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;(vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span&gt;*rawVertexArray = reinterpret_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span&gt;*&amp;gt;(vertexBufferData.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;v : vertices) {
&lt;&#x2F;span&gt;&lt;span&gt;        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        _vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toVector3D&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _vertexBuffer-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setData&lt;&#x2F;span&gt;&lt;span&gt;(vertexBufferData);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAttributeType&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QAttribute::VertexAttribute);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBuffer&lt;&#x2F;span&gt;&lt;span&gt;(_vertexBuffer);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDataType&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QAttribute::Float);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDataSize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QAttribute::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultPositionAttributeName&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addAttribute&lt;&#x2F;span&gt;&lt;span&gt;(_positionAttribute);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;LineMeshGeometry::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;vertexCount&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; _vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done, it&#x27;s possible to easy populate it with a simple class.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;LineMesh::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMesh&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DCore::QNode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;) :
&lt;&#x2F;span&gt;&lt;span&gt;    Qt3DRender::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;QGeometryRenderer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_lineMeshGeo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setInstanceCount&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setIndexOffset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFirstInstance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will allow the line visualization
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPrimitiveType&lt;&#x2F;span&gt;&lt;span&gt;(Qt3DRender::QGeometryRenderer::LineStrip);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will be visualized in qml
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qRegisterMetaType&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;QList&amp;lt;QVector4D&amp;gt; &amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QList&amp;lt;QVector4D&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; gcode = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GcodeTo3D&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(gcode, &amp;amp;GcodeTo3D::posFinished, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;LineMesh::posUpdate);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;LineMesh::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;posUpdate&lt;&#x2F;span&gt;&lt;span&gt;(QList&amp;lt;QVector4D&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _vertices = pos;
&lt;&#x2F;span&gt;&lt;span&gt;    _lineMeshGeo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineMeshGeometry&lt;&#x2F;span&gt;&lt;span&gt;(_vertices, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setVertexCount&lt;&#x2F;span&gt;&lt;span&gt;(_lineMeshGeo-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertexCount&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setGeometry&lt;&#x2F;span&gt;&lt;span&gt;(_lineMeshGeo);
&lt;&#x2F;span&gt;&lt;span&gt;    emit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;finished&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;material-and-entity&quot;&gt;Material and Entity&lt;&#x2F;h3&gt;
&lt;p&gt;The material used in the first GIF was &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qt3d-extras-phongmaterial.html&quot;&gt;PhongMaterial&lt;&#x2F;a&gt;, this is simple done with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qml &quot;&gt;&lt;code class=&quot;language-qml&quot; data-lang=&quot;qml&quot;&gt;&lt;span&gt;PhongMaterial {
&lt;&#x2F;span&gt;&lt;span&gt;  id: lineMaterial
&lt;&#x2F;span&gt;&lt;span&gt;  ambient: &amp;quot;darkGreen&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And in the end, the creation of an Entity.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;qml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qml &quot;&gt;&lt;code class=&quot;language-qml&quot; data-lang=&quot;qml&quot;&gt;&lt;span&gt;LineMesh {
&lt;&#x2F;span&gt;&lt;span&gt;  id: lineMesh
&lt;&#x2F;span&gt;&lt;span&gt;  enabled: true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;qml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-qml &quot;&gt;&lt;code class=&quot;language-qml&quot; data-lang=&quot;qml&quot;&gt;&lt;span&gt;Entity {
&lt;&#x2F;span&gt;&lt;span&gt;  id: lineEntity
&lt;&#x2F;span&gt;&lt;span&gt;  components: [ lineMesh, lineMaterial ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the next week we plan to finish our simple 3D viwer and add it in AtCore test GUI.\
For more info about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kde&#x2F;atcore&quot;&gt;AtCore and Atelier click here !&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;cube2.png&quot; alt=&quot;Cube 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>LaKademy 2017</title>
            <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/lakademy2017/</link>
            <guid>https://patrickelectric.work/blog/2017/lakademy2017/</guid>
            <description>&lt;p&gt;It was my first participation in a KDE sprint event, the famous LaKademy (Latin-America Akademy) in Brazil, Minas Gerais - Belo Horizonte. A great experience to talk, share and learn a bit more about KDE, coffee and software development.&lt;&#x2F;p&gt;
&lt;p&gt;Next I&#x27;ll talk about some points of what I have done during the event.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;first-day&quot;&gt;First day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;AtCore:
&lt;ul&gt;
&lt;li&gt;Some bug corrections of the new AtCore test client, moving from QWidgets to QDockWidget.&lt;&#x2F;li&gt;
&lt;li&gt;Some patchs review.&lt;&#x2F;li&gt;
&lt;li&gt;.gitignore updates to remove .patch and .diff from project.&lt;&#x2F;li&gt;
&lt;li&gt;Update some tasks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop:
&lt;ul&gt;
&lt;li&gt;Solving compilation errors from &lt;code&gt;kdesrc-build --include-dependencies kdevelop&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;syntax-highlighting:
&lt;ul&gt;
&lt;li&gt;Add Arduino extensions (.ino, .pde).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bug correction in breeze-icons, but one was already in review.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;second-day&quot;&gt;Second day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;babe-qt:
&lt;ul&gt;
&lt;li&gt;Code corrections and refactory.&lt;&#x2F;li&gt;
&lt;li&gt;Restore functionality of CMakeLists.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop:
&lt;ul&gt;
&lt;li&gt;Solve some compile corrections.&lt;&#x2F;li&gt;
&lt;li&gt;Attempt to solve more compile problems with --include-dependencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Atcore:
&lt;ul&gt;
&lt;li&gt;Adjustments in GUI.&lt;&#x2F;li&gt;
&lt;li&gt;Update in 3D visualizer of Gcode for 3D printers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;third-day&quot;&gt;Third day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KDE
&lt;ul&gt;
&lt;li&gt;Development of a docker to help the use and development of KDE applications with the help of &lt;code&gt;kdesrc-build&lt;&#x2F;code&gt;.
&lt;ul&gt;
&lt;li&gt;Tested with AtCore, Cantor, GCompris and Kate. (&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;patrickelectric&#x2F;kde&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;)
&lt;ul&gt;
&lt;li&gt;It was only possible with the help of Jedi.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;LaKademy&#x2F;docker.jpg&quot; alt=&quot;Jedi&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;last-day&quot;&gt;Last day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KDE
&lt;ul&gt;
&lt;li&gt;Finalization of kde&#x27;s docker.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop
&lt;ul&gt;
&lt;li&gt;Start to work in copy-paste functionality in KDevelop popup.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was a event completely different of what I thought, a great experience for any developer. Maybe, next time, I can see you in LaKademy 2018 ;)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;LaKademy&#x2F;lakademy2017.jpg&quot; alt=&quot;LaKademy2017&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>