<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Patrick Jos√© Pereira - hardware</title>
        <link>https://patrickelectric.work</link>
        <description>I am an Electronics Engineer that works with robotic systems, OSS and OSH.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://patrickelectric.work/tags/hardware/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
        <item>
            <title>[GSoC] KDev-Embedded, OpenOCD and avrdude</title>
            <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-openocd-and-avrdude/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-openocd-and-avrdude/</guid>
            <description>&lt;p&gt;KDev-Embedded  now have OpenOCD integration and a new interface to use avrdude in launcher.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sudar&#x2F;Arduino-Makefile&quot;&gt;Arduino-Makefile&lt;&#x2F;a&gt;, it&#x27;s possible to use a makefile to perform compilation of Arduino projects. In the video one the the examples are used to shows how it is possible to use the new avrdude launcher to execute the upload process.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;
  	&lt;source src=&quot;&#x2F;assets&#x2F;kdev_embedded_openocd&#x2F;arduino1.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;In the avrdude new interface was added more KComboBox to create a more generic and configurable interface helping advanced users.&lt;&#x2F;p&gt;
&lt;p&gt;The OpenOCD support can upload the binary to an embedded plataform and launch the OpenOCD server to perform upload and debugging with GDB. The graphic interface still in development for further improvements.&lt;&#x2F;p&gt;
&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;
  	&lt;source src=&quot;&#x2F;assets&#x2F;kdev_embedded_openocd&#x2F;lm4f2321.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;In the next steps, we are aiming the OpenOCD interface to be more friendly with basic and advanced users, and a new integration with DFU or other tool for embedded systems.&lt;&#x2F;p&gt;
&lt;p&gt;Best regards,&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, workflow integration</title>
            <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-workflow-integration/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-workflow-integration/</guid>
            <description>&lt;p&gt;After some work in the plugin development, now the project have a strong focus in a better integration with KDevelop workflow. Until now the Board Configuration window have some simple features to perform the upload process for beginner users, it&#x27;s called by the &lt;em&gt;&lt;strong&gt;embedded&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; submenu in the KDevelop toolbar.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Welcome message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow063.png&quot; alt=&quot;arduinowindow063&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Error message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow064.png&quot; alt=&quot;arduinowindow064&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Success message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow065.png&quot; alt=&quot;arduinowindow065&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that the Board Configuration window don&#x27;t follow the integrated workflow of KDevelop, and that&#x27;s what are we doing right now, turning the &lt;strong&gt;KDev-Embedded&lt;&#x2F;strong&gt; an integrated plugin helping programmers that already know how to use the software and how to perform what they want. That&#x27;s the idea behind the &lt;strong&gt;Embedded Launcher&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;KDev-Embedded Embedded Launcher&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;launch_config70.png&quot; alt=&quot;launch_config70&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Embedded Launcher try to help beginners and advanced users with presets and a Board menu, until now the preset ComboBox is disabled until we finish the ARM support and the Board menu configure some others features like MCU, Interface baud rate and Arguments, but the user is free to perform modifications in this fields thanks to KComboBox. After the launcher configuration finished the user can save and execute it to perform  the upload process that shows in KDevelop output.&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;KDevelop output showing the programmer feedback&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;Selection_074.png&quot; alt=&quot;selection074&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The plugin still in development, supporting  Arduino board and being tested only on some boards like Arduino Nano and Mini. In the next week we&#x27;ll start the ARM support.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, The alpha version is coming !</title>
            <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-the-alpha-version-is-coming/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-the-alpha-version-is-coming/</guid>
            <description>&lt;p&gt;The GSoC plan to dominate the world of embedded system developments is near to have his first version !&lt;&#x2F;p&gt;
&lt;p&gt;Today one of the most important steps was performed, the first upload to a microController. The code was a blink compiled with a makefile and uploaded with the KDev-Embedded plugin to an AVR microController (Arduino Nano board).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_the_alpha&#x2F;Selection_024.png&quot; alt=&quot;upload&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the Arduino&#x27;s support done, the plugin will have the first release version and the start of next step (ARM processors).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>[GSoC] KDev-Embedded, Debugging and programming embedded systems</title>
            <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2017/kdev-embedded-debugging-and-programming-embedded-systems/</link>
            <guid>https://patrickelectric.work/blog/2017/kdev-embedded-debugging-and-programming-embedded-systems/</guid>
            <description>&lt;p&gt;The actual embedded system word depends on closed-source IDEs and libraries, with high monetary value and deprecated functionalities. Programmers that would like to use ARM based boards without paying for an IDE will have problems setting up such development ambient and synchronized toolkits.&lt;&#x2F;p&gt;
&lt;p&gt;The main idea of this project is to provide a plugin integrated with KDevelop to help the debugging and programming process of embedded systems like AVR, ARM and x86 based boards.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Since 2011, starting with my electronic engineering graduation the contact with embedded system begun with PIC and ATMEL uC. In 2012 I was accepted in the ROBOTA (competition D&amp;amp;R team) and the ProVANT (Project and Development of UAV in the tilt-rotor configuration), both project working with hardware and software integration.&lt;&#x2F;p&gt;
&lt;p&gt;The development on ProVANT project showed how difficult can be to program an embedded system without using closed source software, It&#x27;s hard to find a descent IDE to develop in such area, ever harder to do it with open-source programs and tools.&lt;&#x2F;p&gt;
&lt;p&gt;But after some time I discovered &lt;a href=&quot;http:&#x2F;&#x2F;openocd.org&#x2F;&quot;&gt;OpenOCD&lt;&#x2F;a&gt; and &lt;em&gt;arm-none-eabi&lt;&#x2F;em&gt; to do my job. But it was such a pain first time to understand and use everything together but after some time everything start to progress.&lt;&#x2F;p&gt;
&lt;p&gt;Now I am at Intel doing my internship to finish my electronic engineering graduation and working on KDevelop for GSOC 2016 project to turn KDevelop into a native system to debug and program embedded systems.&lt;&#x2F;p&gt;
&lt;p&gt;Until now the plugin developed can download and install the Arduino toolkit. This part was strongly based on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mupuf&#x2F;arduide&quot;&gt;ArduIDE&lt;&#x2F;a&gt; project for which I have contributed by updating the Arduino supported version and some corrections of the code, with a great help of Mupuf. Also a window in development to configure that board and interface to program.&lt;&#x2F;p&gt;
&lt;p&gt;The GSOC submission can be found &lt;a href=&quot;http:&#x2F;&#x2F;patrickjp.com&#x2F;wp-content&#x2F;uploads&#x2F;2016&#x2F;04&#x2F;gsoc.pdf&quot;&gt;here&lt;&#x2F;a&gt; for download.&lt;&#x2F;p&gt;
&lt;p&gt;TLDR: The focus of the project is a versatile plugin that can be used for both first travel and experienced programmers in the word of embedded systems !&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll try to update the blog as the project progress.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>FTDI problem: PID 0000</title>
            <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/ftdi-problem-pid-0000/</link>
            <guid>https://patrickelectric.work/blog/2016/ftdi-problem-pid-0000/</guid>
            <description>&lt;p&gt;On¬†29 September 2014, FTDI released an updated version of their USB-to-Serial driver, It was reported by some users that the updated can brick some fake FTDIs chips, by changing their ID to 0000.¬†After some time, the windows update the version of the drive, now this problem is happening a lot in the last days.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;solving-the-problem&quot;&gt;Solving the problem&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Use a linux machine (Ubuntu, mint and etc)&lt;&#x2F;li&gt;
&lt;li&gt;Download¬†&lt;a href=&quot;http:&#x2F;&#x2F;rtr.ca&#x2F;ft232r&#x2F;ft232r_prog-1.24.tar.gz&quot;&gt;ft232r_prog-1.24.tar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Now install make, gcc and libftdi-dev ($ sudo apt-get install make gcc libftdi-dev)&lt;&#x2F;li&gt;
&lt;li&gt;Unzip and compile the ft232r_prog ($ tar -xvf ft232r_prog-1.24.tar.gz, $ make)&lt;&#x2F;li&gt;
&lt;li&gt;Connect the FTDI on your computer.&lt;&#x2F;li&gt;
&lt;li&gt;Now change the ID (sudo .&#x2F;ft232r_prog --old-pid 0x0000 --new-pid 0x6001)&lt;&#x2F;li&gt;
&lt;li&gt;Disconnect and connect again the FTDI and run the lsusb command, now you will see that de id will be 6001.&lt;&#x2F;li&gt;
&lt;li&gt;Have fun !&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h6 id=&quot;tldr&quot;&gt;TLDR&lt;&#x2F;h6&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; wget http:&#x2F;&#x2F;rtr.ca&#x2F;ft232r&#x2F;ft232r_prog-1.24.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -xvf&lt;&#x2F;span&gt;&lt;span&gt; ft232r_prog-1.24.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd ft232r*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt-get install make gcc libftdi-dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo .&#x2F;ft232r_prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --old-pid&lt;&#x2F;span&gt;&lt;span&gt; 0x0000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --new-pid&lt;&#x2F;span&gt;&lt;span&gt; 0x6001
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>Starting with Intel¬Æ Edison Platform</title>
            <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/starting-with-intel-edison-platform/</link>
            <guid>https://patrickelectric.work/blog/2016/starting-with-intel-edison-platform/</guid>
            <description>&lt;p&gt;The Edison Platform is a little computer with all necessary system and hardware to provide a good experiment, we have: wi-fi, bluetooth, serial, io pins and alot more.&lt;&#x2F;p&gt;
&lt;p&gt;As we see the Edson board is an x86-32 architecture, 4 gigabytes to store our files, 1 gigabyte of ram to execute¬†our applications, 2 processing cores to allow the development of parallel programs.¬†this is a¬†development platform with higher performance compared to Respaberry Pi ¬†and 1&#x2F;40 of its volume.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;starting&quot;&gt;Starting&lt;&#x2F;h1&gt;
&lt;p&gt;You will need two ¬†USBs (&lt;a href=&quot;http:&#x2F;&#x2F;www.usbfirewire.com&#x2F;usb_cables_a_to_micro-b_non-angled_67.html&quot;&gt;micro B&lt;&#x2F;a&gt;), one is for serial communication and the other is for power, ethernet, arduino upload and storage device.&lt;&#x2F;p&gt;
&lt;p&gt;Connecting the two cables in your computer, you can use &lt;a href=&quot;http:&#x2F;&#x2F;portableapps.com&#x2F;apps&#x2F;internet&#x2F;putty_portable&quot;&gt;Putty&lt;&#x2F;a&gt;¬†if you are using¬†windows, or you can use screenin your linux computer.&lt;&#x2F;p&gt;
&lt;pre&gt;$ screen &#x2F;dev&#x2F;ttyUSB0 115200&lt;&#x2F;pre&gt;
&lt;p&gt;After connect, type two times the enter key and now we can access the terminal from the &lt;a href=&quot;https:&#x2F;&#x2F;www.yoctoproject.org&#x2F;&quot;&gt;Yocto Linux&lt;&#x2F;a&gt;. The login can be root&#x2F;root or edison&#x2F;edison.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;&#x2F;h1&gt;
&lt;p&gt;Now, we can configure Edison with the command &lt;code&gt;$ configure_edison --setup &lt;&#x2F;code&gt;,¬†we can configure almost everything including the Wi-Fi. The board have already an ssh-server enabled by default.&lt;&#x2F;p&gt;
&lt;pre&gt;$ configure_edison --setup&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;installing-programs&quot;&gt;Installing programs&lt;&#x2F;h1&gt;
&lt;p&gt;The Yocto don&#x27;t have a package manager with the usual programs, so we need to download the¬†*.deb file of the x86-32 architecture.&lt;&#x2F;p&gt;
&lt;p&gt;An example, to install nemo (the text editor):&lt;&#x2F;p&gt;
&lt;pre&gt;$ wget http:&#x2F;&#x2F;www.nano-editor.org&#x2F;dist&#x2F;v2.2&#x2F;nano-2.2.0.tar.gz
$ tar -xvf nano-2.2.0.tar.gz
$ cd  nano*
$ .&#x2F;configure
$ make
$ make install&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;installing-programs-with-opkg&quot;&gt;Installing programs with opkg&lt;&#x2F;h1&gt;
&lt;p&gt;The Intel have a &lt;a href=&quot;https:&#x2F;&#x2F;software.intel.com&#x2F;en-us&#x2F;iot&quot;&gt;repository&lt;&#x2F;a&gt; from¬†the Yocto projecto to the Edison, we can upgrade or system repository to use the Intel IoT devkit.&lt;&#x2F;p&gt;
&lt;pre&gt;nano &#x2F;etc&#x2F;opkg&#x2F;base-feeds.conf&lt;&#x2F;pre&gt;
&lt;p&gt;Inside this file, we need to write the local of the Intel repositories.&lt;&#x2F;p&gt;
&lt;pre&gt;src all http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;1.1&#x2F;iotdk&#x2F;all
src x86 http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;1.1&#x2F;iotdk&#x2F;x86
src i586    http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;1.1&#x2F;iotdk&#x2F;i586&lt;&#x2F;pre&gt;
&lt;p&gt;After that, we can upgrade or package manager database.&lt;&#x2F;p&gt;
&lt;pre&gt;opkg update&lt;&#x2F;pre&gt;
&lt;p&gt;And install something util.&lt;&#x2F;p&gt;
&lt;pre&gt;opkg install git&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>The real tutorial for Galileo Gen 2 Board</title>
            <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://patrickelectric.work/blog/2016/the-real-tutorial-for-galileo-gen-2-board/</link>
            <guid>https://patrickelectric.work/blog/2016/the-real-tutorial-for-galileo-gen-2-board/</guid>
            <description>&lt;p&gt;Some of the tutorials on the internet are outdated, and cause a lot of problems to start on the develop of the Galileo Gen 2 Board, to solve this, we will explain what you&#x27;ll need to do to make the best setup possible.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Test tour board.
Make a simple test,¬†take a FTDI cable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;ftdi5v.jpg&quot; alt=&quot;ftdi&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Put the black cable (the one that have an arrow on it) on the GND.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;ftdi-galileo.jpg&quot; alt=&quot;Galileo Connector&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The board come with a jumper to select the logic level of the FTDI (5V or 3.3V).
After that, we ¬†can access the terminal of the inboard Linux. ¬†Plug the FTDI in your computer.&lt;&#x2F;p&gt;
&lt;pre&gt;$ dmesg&lt;&#x2F;pre&gt;
&lt;p&gt;With this command you will see the name of the USB adapter.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;dmesg-ftdi.png&quot; alt=&quot;ftdi dmesg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As we can see, the name of the USB adapter is ttyUSB0.
Now we can connect with the board and read the feedback of the boot.&lt;&#x2F;p&gt;
&lt;pre&gt;$ screen &#x2F;dev&#x2F;ttyUSB0 115200&lt;&#x2F;pre&gt;
&lt;p&gt;Turn on your board and wait, you will see the boot options and the log.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade your firmware.
Download the program to update the firmware of the board.
Website :&lt;a href=&quot;https:&#x2F;&#x2F;downloadcenter.intel.com&#x2F;download&#x2F;24748&#x2F;Intel-Galileo-Firmware-and-Drivers-1-0-4&quot;&gt;Intel Links.&lt;&#x2F;a&gt;
Windows software : &lt;a href=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;IntelGalileoFirmwareUpdater-1.0.4-Windows.zip&quot;&gt;IntelGalileoFirmwareUpdater-1.0.4-Windows&lt;&#x2F;a&gt;
OS Independent : &lt;a href=&quot;&#x2F;assets&#x2F;the_real_tutorial_for_galileo_gen_2_board&#x2F;IntelGalileoFirmwareUpdater-1.0.4.jar&quot;&gt;IntelGalileoFirmwareUpdater-1.0.4&lt;&#x2F;a&gt;
The Windows 10 and the Linux OS already have the drivers for Galileo and Edison.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Download the last image to your SD card.
The last image can be downloaded with &lt;a href=&quot;https:&#x2F;&#x2F;software.intel.com&#x2F;sites&#x2F;landingpage&#x2F;iotdk&#x2F;board-boot-image.html&quot;&gt;this link.
&lt;&#x2F;a&gt;Format the SD card with fat32 (you can do this with gparted).
Unzip the file and put the image inside of the SD card, you can do this with the dd command.&lt;&#x2F;p&gt;
&lt;pre&gt;$ dd if=image of=&#x2F;dev&#x2F;sdx bs=8&lt;&#x2F;pre&gt;
&lt;p&gt;If the board did not boot the SD card try another card.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Update the repository.
Use the command¬†&lt;code&gt;$ opkg update &lt;&#x2F;code&gt; to update your the repository, if the command did not return no nothing, you will need to set the repository by hand, like done &lt;a href=&quot;&#x2F;starting_with_intel_edison_platform&quot;&gt;in the this pots&lt;&#x2F;a&gt;. But use the new repository !
You can see the new one &lt;a href=&quot;http:&#x2F;&#x2F;iotdk.intel.com&#x2F;repos&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
    </channel>
</rss>